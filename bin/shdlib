_shd_mfgd () 
{ 
    : read -p "$(myname) ( $* )" < /dev/tty;
    shdoc $1 | grep mfg: > /dev/null && echo $1
}
shd_abstract () 
{ 
    : return functionName, one-line function abstract;
    : date: 2020-05-03;
    function _fmt_dateless_01 () 
    { 
        shd_dateless $1 | sed 1q | sed '

        # trim thru the leading colon, blank
        s/^ *: *//

        # trim trailing semi-colon
	s/ *; *$//
	'
    };
    isfunction $1 && { 
        printf "%s\t%s\n" $1 "$( _fmt_dateless_01 $1 )"
    };
    [[ $# -gt 1 ]] && shd_abstract ${*:2}
}
shd_all () 
{ 
    : date: 2018-11-05;
    report_notfile "${1:-Missing Function Libary}" && return 1;
    foreach shd_one $(functions $*)
}
shd_apify () 
{ 
    : comment-free code, less definition and braces;
    : date: 2019-01-28;
    shd_trim $1 | awk 'NR >2 { print last; last=$0 }'
}
shd_assert () 
{ 
    : ~ function;
    : returns: candidate comments;
    : turns report_not... into colon-comment for docstring.;
    : todo: use "cat/filter" trick between declare ... colons;
    : uses: shd_justcolon sed;
    : date: 2020-05-11;
    report_notfunction $1 && return 1;
    for fun in ${1:-$(myname)};
    do
        declare -f $fun | sed '
          s/^\( *\)\(report_not\)/\1: \2/
      ' | shd_colons;
    done
}
shd_clean () 
{ 
    : removes empty doc strings from stdin;
    : 2019-01-28 using canonical { declare -f } format for doc;
    report_notpipe && return 1;
    awk -f $(awk_file)
}
shd_collect () 
{ 
    : collect functions, defaulting to SET;
    : uses: fun_allbody;
    : libr: stdlib;
    : date: 2020-02-20;
    case $# in 
        0)
            set
        ;;
        *)
            fun_allbody ${*:--}
        ;;
    esac
}
shd_copyright () 
{ 
    : date: 2019-04-22;
    cat <<EOF
Copyright (c) 2016-2020 Marty McGowan, JYATL - Just Yet Another Testing Lab

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.

EOF

}
shd_demo () 
{ 
    shdoc $(sfg shd_)
}
shd_entry () 
{ 
    : entry points into shd_app;
    ${*:-echo} shd_{oc,listformat,entry,demo}
}
shd_getdate () 
{ 
    : date: 2016-10-01;
    : test for file arguments;
    : collect date-stamps from functions, by args;
    : 0 -- all functions;
    : N -- library ... function ...;
    : date: 2017-03-11;
    : add RE to allow date: field;
    : date: 2018-01-17;
    : date: 2018-02-16;
    : app_trace $*;
    : date: 2019-05-30;
    { 
        case $# in 
            0)
                set
            ;;
            *)
                fun_allbody ${*:--}
            ;;
        esac
    } | awk ' 	    
        $2 ~ /^\(\)$/     { fun = $1 } 

        $1 ~ /^:$/ && $2 ~ /^date:*$/ {

                             printf "%s\t%s\n", fun, $0
			  }
    '
}
shd_getlibr () 
{ 
    : collect date-stamps from functions, by args;
    : date: 2016-10-01;
    : test for file arguments;
    : libr: stdlib;
    : 0 -- all funtions;
    : N -- library ... function ...;
    : date: 2017-03-11;
    : add RE to allow date: field;
    : date: 2018-01-17;
    : date: 2018-02-16;
    : app_trace $*;
    : date: 2019-05-30;
    : date: 2020-02-19;
    : date: 2020-02-20;
    shd_collect $* | awk '
                          # { print $0 > "/dev/stderr"; }
        $2 ~ /^\(\)$/     { fun = $1 } 

        $1 ~ /^:$/ && $2 ~ /^libr:*$/ {
                             sub(": libr: ","")
                             sub(";","")
			  #  print $0 > "/dev/stderr";
                             printf "%s\t%s\n", fun, $0
			  }
    '
}
shd_history () 
{ 
    : list LAST_CHANGEDATE FUNCTION for each function in Environment;
    : date: 2019-03-24;
    set | shd_getdate | awk ' { sub(/;/, "", $4); printf "%s\t%s\n", $4, $1 }' | sort -r | awk '!p[$2]++ { print }'
}
shd_init () 
{ 
    return;
    fam_iam
}
shd_justcolon () 
{ 
    : returns leading colon-comments from functions;
    : date: 2020-05-11;
    function _justcolon () 
    { 
        isfunction $1 || return;
        declare -f $1 | shd_colons
    };
    foreach _justcolon $*
}
shd_latest () 
{ 
    : date: 2016-10-16;
    : uses: shd_getdate awk;
    : date: 2018-01-17;
    : date: 2018-02-16;
    shd_getdate $* | awk '

        { sub(/;/,"", $4); date[$1] = $4 };
    END { for (d in date) print date[d], d; }

    '
}
shd_listformat () 
{ 
    : produce SHD listformat for functions tags;
    : date: 2020-03-29;
    : date: 2020-03-30;
    app_trace $*;
    foreach shd_taglist $* | tee ${1}_list.txt | awk -v file=$1 -f $(awk_file);
    : todo clean up extra blank records in shdoc;
    ls -lrt ${1}_*.txt
}
shd_longrecord () 
{ 
    : query all non-date tags and date with reason;
    : sql: row;
    : date: 2020-04-01;
    report_notpipe && return 1;
    listtotable | row '

        tag !~ /date/ || ( 
	tag ~  /date/ && length(record) > 11
    )'
}
shd_mfgd () 
{ 
    : manufactured function arguments;
    : date: 2018-01-21;
    : date: 2010-02-16 use _ function;
    : date: 2010-04-22 add stdin_orargs, FOREACH is always a good candidate;
    foreach _shd_mfgd $( stdin_orargs $* )
}
shd_mydoc () 
{ 
    : retreive the comment header of the Calling Function;
    : .. myname 2.., most likely due to a detected error;
    : date: 2019-11-23;
    : date: 2020-05-11;
    set -- $(myname 2);
    report_notfunction $1 && return 1;
    { 
        printf "\nFUNCTION\t$1\n";
        shd_justcolon $1
    } 1>&2
}
shd_mydoc_case () 
{ 
    : this is a test of shd_mydoc. One Argument is required;
    : the calling functions comment header is returned;
    : date: 2019-11-23;
    report_notfunction ${1:-/dev/null} && { 
        shd_mydoc;
        return 1
    };
    printf "=====\n%s\n" "this argument: $1 IS a Function"
}
shd_mydoc_notfunction () 
{ 
    : testcase for shd_mydoc not function;
    : this function requires a FUNCTION for its first Argument;
    report_notfunction $1 && { 
        shd_mydoc;
        return 1
    };
    printf "\nthis function $(myname) received a FUNCTION Arugment: $1\n" 1>&2
}
shd_mydoc_test () 
{ 
    : test cases for shd_mydoc. One Argument is required;
    : the calling functions comment header is returned;
    : date: 2019-11-23;
    clear;
    unset foo;
    set shd_mydoc{,_{notfunction,test}};
    $2 foo;
    $2 $3;
    echo =======;
    declare -f $*
}
shd_nonentry () 
{ 
    ${*:-echo} line1 assert init rdbtags taglist tohelp top with update
}
shd_oc () 
{ 
    : makes conventional name for shdoc in SHD family;
    shdoc ${*:-$(myname) shdoc}
}
shd_one () 
{ 
    : this is a shell doclib shdoc "abstract";
    : while the "shdoc" itself is the first ":"-origin lines;
    : in the shell function, the rest being the executable.;
    : writes a function {name}_doc for function "name";
    : note: "function NAME_doc () {" is a sticky format.;
    : uses: shd_trim;
    : date: 2017-02-09;
    : date: 2018-02-16;
    report_notfunction $1 && return 1;
    printf "function %s_doc () {\n" $1;
    shd_trim $1;
    echo "}"
}
shd_setdate () 
{ 
    : appends date tag to function, avoiding redundancy;
    : as last line among leading shdoc comments;
    : this uses the local function trick. trailing UNSET;
    : date: 2016-09-30;
    : update: change date from comment to shd_ tag;
    : uses: awk declare foreach fun_allnames uniq;
    : args: .. function .. library ..;
    : stdout: function_body ...;
    : date: 2018-01-17;
    : date: 2018-02-16;
    function _dffx () 
    { 
        declare -f $1 | awk -v date=$(date +%F) '

        BEGIN       { code = 0 }

        NR < 3 || ( \
        NR > 2 && !code && $1 ~ /^:$/ \
	          ) {
	              print; next
		    }
        !code       {
	              printf "    : date: %s;\n", date
		      code = 1
		    }
		    { print }

     ' | uniq | tee .$(myname).out
    };
    : app_trace $*;
    foreach _dffx $(fun_allnames ${*:-shd_setdate});
    unset _dffx
}
shd_summary () 
{ 
    for fun in $*;
    do
        isfunction $fun || continue;
        printf "\n----\t$fun\n";
        declare -f $fun | sh_lcolon | grep -v ": date: ....-..-..;$";
    done
}
shd_taglist () 
{ 
    : write the tagged fields in list format;
    : todo separatate date, fix into table;
    : date: 2020-03-01;
    : date: 2020-03-30;
    : date: 2020-04-05 quietly ignore non-functions for shd_listformat;
    : date: 2020-05-11;
    isfunction ${1:-/dev/null} || return;
    printf "\nname\t%s\n" $1;
    shd_justcolon $1 | sed '

        # clean the text upto the tag or shdoc comment
        s/^ *: *//

        # remove the trailing semi-colons from the declare -f; 
	s/;$//

    ' | awk -f $(awk_file)
}
shd_tagnames () 
{ 
    : date: 2017-04-19;
    report_notfunction $1 && return 1;
    shd_tags $* 2> /dev/null | field 2 | sort -u
}
shd_tohelp () 
{ 
    : date: 2019-10-04;
    : date: 2020-05-11;
    printf "\n$1\n";
    shd_justcolon $1 | sed 's/.*:/    /'
}
shd_top () 
{ 
    ${*:-echo} shdoc shd_{oc,tags,with,test}
}
shd_unmfgd () 
{ 
    : UNmanufactured function arguments;
    : date: 2018-02-16;
    : date: 2018-04-21 use stdin_orargs;
    complement shd_mfgd $( stdin_orargs $* )
}
shd_with () 
{ 
    shdoc ${*:-shdoc} | shd_clean
}
shdoc () 
{ 
    : the whole shdoc;
    : date: 2020-05-11;
    isfunction ${1:-/dev/null} && { 
        printf "\nshdoc\t%s\n" $1;
        shd_justcolon $1 | awk '$2 !~ /:$/ { sub(/: /,""); print }'
    }
}
shd_abscollect () 
{ 
    : collect function abstracts;
    : date: 2020-05-08;
    rdb_hdr funame abstract;
    shd_abstract $*
}
shd_colon_test () 
{ 
    : test SHD COLON functions against its library;
    : date: 2020-05-11;
    function _shd_test () 
    { 
        :;
        local fmt="\n%s\n==========\n";
        cmmd=$1;
        case $1 in 
            foreach)
                cmmd=$2
            ;;
        esac;
        printf $fmt $cmmd;
        $@
    };
    function run_colons () 
    { 
        declare -f $* | $1
    };
    set -- $(sfg shd_);
    _shd_test shd_justcolon $*;
    _shd_test shd_abstract $*;
    _shd_test run_colons shd_colons $2 $3 $4;
    _shd_test foreach shd_taglist $*
}
shd_colons () 
{ 
    : returns COLON comments from FIRST function;
    : date: 2020-05-11;
    report_notpipe && return 1;
    awk '
    NR > 2 {
             if ( $1 !~ /^:/ ) exit
             else              print
           }
    '
}
_shdoc () 
{ 
    : date: 2018-02-16;
    : date: 2020-05-11;
    report_notfunction $1 && return 1;
    echo "function ${1}_doc {";
    declare -f $1 | shd_justcolon;
    echo "}"
}
shd_dateless () 
{ 
    : local of shd_abstract;
    : date: 2020-05-11;
    shd_justcolon $1 | grep -v ': date:'
}
shd_init  1>&2
