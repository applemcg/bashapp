_shd_mfgd () 
{ 
    : read -p "$(myname) ( $* )" < /dev/tty;
    shdoc $1 | grep mfg: > /dev/null && echo $1
}
shd_abstract () 
{ 
    : return functionName, one-line function abstract;
    report_notfunction ${1:-/dev/null} && return 1;
    printf "%s\t%s\n" $1 "$(declare -f $1 | shd_justcolon | grep -v ': date:' | sed 1q | sed 's/^ *: *//; s/ *; *$//')"
}
shd_all () 
{ 
    : date: 2018-11-05;
    report_notfile "${1:-Missing Function Libary}" && return 1;
    foreach shd_one $(functions $*)
}
shd_apify () 
{ 
    : comment-free code, less definition and braces;
    : date: 2019-01-28;
    shd_trim $1 | awk 'NR >2 { print last; last=$0 }'
}
shd_assert () 
{ 
    : ~ function;
    : returns: candidate comments;
    : turns report_not... into colon-comment for docstring.;
    report_notfunction $1 && return 1;
    declare -f ${1:-$(myname)} | sed 's/^\( *\)\(report_not\)/\1: \2/' | shd_justcolon
}
shd_clean () 
{ 
    : removes empty doc strings from stdin;
    : 2019-01-28 using canonical { declare -f } format for doc;
    report_notpipe && return 1;
    awk '
        !NF         { next }
        #
        NF == 2 && $2 ~ /[(][)]/ { lcount = 0 }
        #                         
                    { line[lcount++] = $0; }

        #  template:
        #  0: name ()
        #  1: {
        #  i: ...
        #  N: }   
        lcount < 3  { next; }

        lcount == 3 { if( $1 ~ /^}$/ ) { lcount = 0; next; }
                      else             { print line[0]; print line[1]; }
                    }
                    # printf "DEBUG: lc(%d): %s\n", lcount, $0 > "/dev/stdout"; }
                    { print line[lcount-1] }
      '
}
shd_collect () 
{ 
    : collect functions, defaulting to SET;
    : date: 2020-02-20;
    case $# in 
        0)
            set
        ;;
        *)
            fun_allbody ${*:--}
        ;;
    esac
}
shd_copyright () 
{ 
    : date: 2019-04-22;
    comment "Copyright (C) 2016-2019, JYATL - Just Yet Another Testing Lab";
    email_comment
}
shd_demo () 
{ 
    shdoc $(sfg shd_)
}
shd_entry () 
{ 
    : entry points into shd_app;
    ${*:-echo} shd_{oc,listformat,entry,demo}
}
shd_getdate () 
{ 
    : date: 2016-10-01;
    : test for file arguments;
    : collect date-stamps from functions, by args;
    : 0 -- all functions;
    : N -- library ... function ...;
    : date: 2017-03-11;
    : add RE to allow date: field;
    : date: 2018-01-17;
    : date: 2018-02-16;
    : app_trace $*;
    : date: 2019-05-30;
    { 
        case $# in 
            0)
                report_notpipe && { 
                    comment e.g. set ...;
                    return 1
                }
            ;;
            *)
                fun_allbody ${*:--}
            ;;
        esac
    } | awk ' 	    
        $2 ~ /^\(\)$/     { fun = $1 } 

        $1 ~ /^:$/ && $2 ~ /^date:*$/ {

                             printf "%s\t%s\n", fun, $0
			  }
    '
}
shd_getlibr () 
{ 
    : collect date-stamps from functions, by args;
    : date: 2016-10-01;
    : test for file arguments;
    : 0 -- all funtions;
    : N -- library ... function ...;
    : date: 2017-03-11;
    : add RE to allow date: field;
    : date: 2018-01-17;
    : date: 2018-02-16;
    : app_trace $*;
    : date: 2019-05-30;
    : date: 2020-02-19;
    : date: 2020-02-20;
    shd_collect $* | awk '
                          # { print $0 > "/dev/stderr"; }
        $2 ~ /^\(\)$/     { fun = $1 } 

        $1 ~ /^:$/ && $2 ~ /^libr:*$/ {
                             sub(": libr: ","")
                             sub(";","")
			  #  print $0 > "/dev/stderr";
                             printf "%s\t%s\n", fun, $0
			  }
    '
}
shd_history () 
{ 
    : list LAST_CHANGEDATE FUNCTION for each function in Environment;
    : date: 2019-03-24;
    set | shd_getdate | awk ' { sub(/;/, "", $4); printf "%s\t%s\n", $4, $1 }' | sort -r | awk '!p[$2]++ { print }'
}
shd_init () 
{ 
    return;
    fam_iam
}
shd_justcolon () 
{ 
    : returns leading colon-comments from a SINGLE function;
    : date: 2020-08-28;
    report_notpipe && return 1;
    awk '
    NR > 2 {
             if ( $1 !~ /^:/ ) exit
             else              print
           }
    '
}
shd_latest () 
{ 
    : retrieve the last date tag in the function argument OR STDIN;
    : date: 2016-10-16;
    : date: 2018-01-17;
    : date: 2018-02-16;
    shd_getdate $* | awk '

        { sub(/;/,"", $4); date[$1] = $4 };
    END { for (d in date) print date[d], d; }

    '
}
shd_listformat () 
{ 
    : produce SHD listformat for functions tags;
    : date: 2020-03-29;
    : date: 2020-03-30;
    app_trace $*;
    foreach shd_taglist $* | tee ${1}_list.txt | awk -v file=$1 -f $(awk_file);
    : todo clean up extra blank records in shdoc;
    ls -lrt ${1}_*.txt
}
shd_longrecord () 
{ 
    : query all non-date tags and date with reason;
    : date: 2020-04-01;
    report_notpipe && return 1;
    listtotable | row '

        tag !~ /date/ || ( 
	tag ~  /date/ && length(record) > 11
    )'
}
shd_mfgd () 
{ 
    : manufactured function arguments;
    : date: 2018-01-21;
    : date: 2010-02-16 use _ function;
    : date: 2010-04-22 add stdin_orargs, FOREACH is always a good candidate;
    foreach _shd_mfgd $( stdin_orargs $* )
}
shd_mydoc () 
{ 
    : retreive the comment header of the Calling Function;
    : .. myname 2.., most likely due to a detected error;
    : date: 2019-11-23;
    set -- $(myname 2);
    report_notfunction $1 && return 1;
    { 
        printf "\nFUNCTION\t$1\n";
        declare -f $1 | shd_justcolon
    } 1>&2
}
shd_mydoc_case () 
{ 
    : this is a test of shd_mydoc. One Argument is required;
    : the calling functions comment header is returned;
    : date: 2019-11-23;
    report_notfunction ${1:-/dev/null} && { 
        shd_mydoc;
        return 1
    };
    printf "=====\n%s\n" "this argument: $1 IS a Function"
}
shd_mydoc_notfunction () 
{ 
    : testcase for shd_mydoc not function;
    : this function requires a FUNCTION for its first Argument;
    report_notfunction $1 && { 
        shd_mydoc;
        return 1
    };
    printf "\nthis function $(myname) received a FUNCTION Arugment: $1\n" 1>&2
}
shd_mydoc_test () 
{ 
    : test cases for shd_mydoc. One Argument is required;
    : the calling functions comment header is returned;
    : date: 2019-11-23;
    clear;
    unset foo;
    set shd_mydoc{,_{notfunction,test}};
    $2 foo;
    $2 $3;
    echo =======;
    declare -f $*
}
shd_nonentry () 
{ 
    ${*:-echo} line1 assert init rdbtags taglist tohelp top with update
}
shd_oc () 
{ 
    : makes conventional name for shdoc in SHD family;
    shdoc ${*:-$(myname) shdoc}
}
shd_one () 
{ 
    : this is a shell doclib "shdoc" comment;
    : --------------------------------------;
    : an shdoc comment is the first ":"-origin lines;
    : in the shell function, the rest being the executable.;
    : writes a function {name}_doc for function "name";
    : note: "function NAME_doc () {" is a sticky format.;
    : date: 2017-02-09;    
    : date: 2018-02-16;
    report_notfunction $1 && return 1;
    printf "function %s_doc () {\n" $1;
    shd_trim $1;
    echo "}"
}
shd_setdate () 
{ 
    : appends date tag to functions shdoc -- this -- block,
    : returning updated funciton body;
    : avoiding redundancy, as last line among leading shdoc comments;
    : this uses the local function trick. trailing UNSET;
    : date: 2016-09-30 changed date from comment to TAG;
    : args: .. function .. library ..;
    : date: 2018-01-17;
    : date: 2018-02-16;
    function _dffx () 
    {
        read_devtty $1
        declare -f $1 | awk -v date=$(date +%F) '

        BEGIN       { code = 0 }
        #           { printf "NR: %d, code: %d, line: %s\n", NR, code, $0 > "/dev/stderr" ; }
        NR < 3 || ( \
        NR > 2 && !code && $1 ~ /^:$/ \
	          ) {
	              print; next
		    }
        !code       {
	              printf "    : date: %s;\n", date
		      code = 1
		    }
		    { print }

     ' | uniq | tee .$(myname).out
    };
    read_devtty $*;
    foreach _dffx $(fun_allnames ${*:-shd_setdate});
}
shd_summary () 
{ 
    for fun in $*;
    do
        isfunction $fun || continue;
        printf "\n----\t$fun\n";
        declare -f $fun | sh_lcolon | grep -v ": date: ....-..-..;$";
    done
}
shd_taglist () 
{ 
    : write the tagged fields in list format;
    : todo separatate date, fix into table;
    : date: 2020-03-01;
    : date: 2020-03-30;
    : date: 2020-04-05 quietly ignore non-functions for shd_listformat;
    : date: 2020-08-28;
    isfunction ${1:-/dev/null} || return;
    printf "\nfun\t%s\n" $1;
    declare -f $1 | shd_justcolon | sed '

        # clean the text upto the tag or shdoc comment
        s/^ *: *//

        # remove the trailing semi-colons from the declare -f; 
	s/;$//

    ' | awk -f $(awk_file)
}
shd_tagnames () 
{ 
    : date: 2017-04-19;
    report_notfunction $1 && return 1;
    shd_tags $* 2> /dev/null | field 2 | sort -u
}
shd_tags () 
{ 
    : writes function tag and tagline;
    : date: 2020-10-02;
    shd_oc ${*:-$(myname)} | awk '

        $1 ~ /^function$/ { name = $2; sub(/_doc$/,"",name); }
	$2 ~ /:$/         {
           tag = $0
	   sub(/: /,"",tag)
   	   sub(/: /,"\t",tag)
      	   sub(/;$/,"",tag)
	   printf "%-9s\t%s\n", name, tag
        }
	'
}
shd_test () 
{ 
    : 1. test default, NO arguments, then;
    : 2. stub out test all functions in the library;
    : 3. demonstrate ignore subsequent comments;
    : 4. test shd_clean;
    rm -f .shd*;
    set .shd{oc,clean};
    shdoc;
    :;
    shdoc $(sfg shd_) | tee $1 | shd_clean | tee $2;
    declare -f shd_test | grep -v '^ *:' 1>&2;
    wc $*;
    comm -23 <(functions $1|sort) <(functions $2|sort)
}
shd_tohelp () 
{ 
    : date: 2019-10-04;
    printf "\n$1\n";
    declare -f $1 | shd_justcolon | sed 's/.*:/    /'
}
shd_top () 
{ 
    ${*:-echo} shdoc shd_{oc,tags,with,test}
}
shd_trim () 
{ 
    : ~ function;
    : user function to trim candidate comments;
    set ${*:-$(myname)};
    report_notfunction $1 && return 1;
    declare -f $* | awk ' $1 !~ /^:[;]*$/'
}
shd_unmfgd () 
{ 
    : UNmanufactured function arguments;
    : date: 2018-02-16;
    : date: 2018-04-21 use stdin_orargs;
    complement shd_mfgd $( stdin_orargs $* )
}
shd_with () 
{ 
    shdoc ${*:-shdoc} | shd_clean
}
shdoc () 
{ 
    : this is a shell doclib "shdoc" comment;
    : an shdoc comment is the first ":"-origin lines;
    : in the shell function, the rest being the executable.;
    : date: 2018-02-16;
    : date: 2019-01-28 use local _shdoc and produce declare -f format;
    function _shdoc () 
    { 
        report_notfunction $1 && return 1;
        echo "function ${1}_doc {";
        declare -f $1 | shd_justcolon;
        echo "}"
    };
    foreach _shdoc ${*:-$(myname)};
    unset _shdoc
}
shd_allftags () 
{ 
    : for all functions. collect and distribute the tags;
    : date: 2020-03-29;
    : date: 2020-04-12;
    foreach shd_taglist ${*:-$(myname))} | tee allftags.txt | shd_distribute
}
shd_distribute () 
{ 
    : distribute the fields to their tables;
    : todo: fix the seqn, co-ordinate with shd_taglist.awk;
    : date: 2020-03-29;
    : date: 2020-04-12;
    report_notpipe && return 1;
    awk '
        function funs( line) {  print line > "functions.txt"; }
        function shdc( line) {  print line > "shdoc.txt"; }	

        NF < 1        { funs( $0); shdc( $0); next }
	$1 ~ /name/   { name = $2; funs( $0); next }
        $1 ~ /abstrt/ { funs( $0);            next }

                        # separate record for each seqn, shdoc

        $1 ~ /seqn/   { shdc( sprintf("name\t%s\n%s", name, $0)); next }
        $1 ~ /shdoc/  { shdc( $0 "\n");       next }

                      { funs( $0) }
    '
}
shd_tagdata () 
{ 
    : write the tagged fields in list format;
    : todo separatate date, fix into table;
    : date: 2020-03-01;
    : date: 2020-03-29;
    : date: 2020-04-12;
    report_notpipe && return 1;
    awk '
        NR == 1 && $1 !~ /.*:$/  {

	   printf "abstr\t%s\n", $0
	   abstr = $0
	   next
	}
        $1 ~ /.*:$/  {

	   field = $1; record = $0
	   sub(/:/,"",field)
	   sub(/.*: */,"",record)
	   if (field ~ /date/) {
	       latest =  $2
	       first  = (first? first: $2)
	       next
	   }
	   	   printf "%s\t%s\n", field, record
	   next
       }   
       {
           if(seqn < 1)  {
	        # abstract is SEQN = 0 
                printf "seqn\t%d\n", seqn++
		printf "shdoc\t%s\n", abstr
	   }   
	   printf "seqn\t%d\n", seqn++
	   printf "shdoc\t%s\n", $0
       }
       END { if (first) {

           printf "%s\t%s\n", "first", first
	   printf "%s\t%s\n", "latest", latest
	   }
       }
       '
}
shd_toplist () 
{ 
    : important shd_ functions, most?;
    : date: 2020-08-28;
    ${*:-echo} shd_{taglist,justcolon,toplist,tagcolumn}
}
shd_tagcolumn () 
{ 
    : extract functions with a tag, the name and the column;
    : update the list of function tags daily;
    : 2020-06-10 test for non-existent or EMPTY file, add SMART cat;
    : todo: collect and generalize references to shd_alldata.{txt,lst}
    : date: 2020-08-28;
    : date: 2020-09-28;
    : date: 2020-10-02;
    : date: 2020-10-03;
    function _shd_alldata () 
    { 
        : produces all tagdata, and trims list to datadictionary;
        foreach shd_taglist $(fun_collection) | tee ./shd_alldata.txt | field 1 | sort -u
    };
    runfrom $(funlib_rdb) || return;
    local datadict=$(shd_tagdatadict);
    [[ -f $datadict ]] || _shd_alldata > $datadict;
    modified_today $datadict || _shd_alldata > $datadict;
    : accept a column name, or if none, pick from the datadictionary;
    cat $datadict shd_alldata.txt > shd_alldata.lst
}
shd_onetag () 
{ 
    : date: 2020-09-28;
    runfrom $(funlib_rdb) || return;
    local datadict=shd_tagcolumn.txt;
    set ${1:-$(pick $(< $datadict))};
    cat shd_alldata.lst | column fun $1 | row $1
}
fun_collection () 
{ 
    : every know function name;
    : related: f2file shd_tagcolumn lib_{changed,process} .;
    : date: 2020-10-02;
    runfrom $(lib)/dir || return;
    ls */* | awk -F/ '{ print $2 }' | sort -u
}
date_firstlast () 
{ 
    : save the NAME, FIRST and LAST dates of the records in a LIST format file;
    : defend against the date having extra information on the record;
    : date: 2020-10-02;
    : date: 2020-10-11 -- NAME is now a FUN.;
    report_notpipe && return 1;
    awk '

BEGIN       { FS = "\t"
              fmt = "\nfun\t%s\ncreated\t%s\nlatest\t%s\n"
	      fmd = "%s\t%s\t"
	      p   = 0
	    }
END         { printf "\n" }

            { if( testing ) {

	        print "DEBUG: " NR ",  " $0
		printf fmd, "first", first
	        printf fmd, "p", p
 	        printf fmd, "created", created
	        printf fmd, "latest", latest
	        printf "\n"
		}
	    }

NF < 1 && p   { printf fmt, name, created, latest; p = 0; created = latest = "" }

$1 ~ /^fun$/  { first = 1; name = $2 };

$1 ~ /^date$/ {  p = 1
                 if( first ) {
	            first = 0
		    created = substr($2,1,10)
                 }		   
                 latest = substr($2,1,10)
             }
'
}
shd_tagdatadict () 
{ 
    : name of tag_datadictionary. to refresh, rm -f;
    : date: 2020-10-03;
    ${*:-echo} $(funlib_rdb)/$(myname).txt
}
fun_createdlatest () 
{ 
    : function, date created, latest change;
    : date: 2020-10-15;
    runfrom $(funlib_rdb) || return;
    cat shd_alldata.lst | date_firstlast | listtotable | awk NF | sorttable | tee fun_createdlatest.rdb
}
echo shd_init 1>&2
