_collect_library () 
{ 
    : collect and update the library for all the functions in the dir/lib/name directory;
    report_notdirectory $1 && return 1;
    local base=$(basename $1);
    read_devtty base: $base;
    local tolib=$(which $base);
    report_notfile $tolib && return 2;
    read_devtty tolib: $tolib;
    cat $1/* > $tolib;
    lib_tidy $tolib
}
app_isa () 
{ 
    : encourage FUNCTIONS to Become an APP;
    : usage: "app_isa arg ... || return";
    : caller may have an _INIT function, if so, call it;
    : also, if CALLER_$1 is a function, call it with args, and return;
    : and, if the first argument is NOT a function and;
    : if there is a MAIN function, call it;
    : internal -- parent_subfunction, FUNC return failure = 1.;
    : to allow parent a default behavior of its own.;
    : date: 2020-01-27;
    : date: 2020-02-02 add default _MAIN function;
    local parent=$(proc_parent $(myname 2));
    :;
    : ------------------------------------------------------ any initialization --;
    local init=${parent}_init;
    isfunction $init && $init 2> /dev/null;
    :;
    : -------------------------------------------------- any user customization --;
    : --------- has to be an executable, not a function --;
    :;
    local user=$(which ${parent}_user);
    [[ -f "$user" ]] && $user;
    :;
    : ------------------------------------------------------- a PARENT_function --;
    : -------------------- is the first arg: PARENT arg --;
    local func=${parent}_$1;
    isfunction $func && { 
        shift;
        $func $*;
        return 1
    };
    : ------------------------------------------------------ implicit functions --;
    case $1 in 
        help)
            : ----------------------- this is the default help function --;
            :;
            : a user-defined parent_help overrides by calling "parent help";
            sfg ${parent}_ | pr -t4 1>&2;
            return 1
        ;;
        *)
            : ------------------- main is surrogate for no sub-function --;
            :;
            local main=${parent}_main;
            isfunction $main && { 
                $main "$@";
                return 1
            };
            comment NOT Help, PARENT: $parent, args: $*;
            ( printf "$parent %s\n" "[ help |";
            printf "$(app_kids ${parent}_ | pr -t4 | sed 's/^/        /') \n]\n" ) 1>&2
        ;;
    esac
}
app_pause () 
{ 
    : date: 2020-09-24;
    trace_sub $@
}
app_trace () 
{ 
    : report the CALLER name 0, its args, their caller 1, and the callers caller 2.;
    : date: 2019-05-04;
    : date: 2020-04-23;
    local call_0="";
    local call_1="";
    local call_2="";
    local cdepth=${#FUNCNAME[@]};
    [[ $cdepth -gt 1 ]] && call_0=${FUNCNAME[1]};
    [[ $cdepth -gt 2 ]] && call_1=${FUNCNAME[2]};
    [[ $cdepth -gt 3 ]] && call_2=${FUNCNAME[3]};
    app_pause "CLEAN ME UP $call_0( $* ) $call_1 $call_2"
}
argnumber () 
{ 
    : returns argument position of first arg;
    : ~ match ... ?match ...;
    : date: 2018-10-29;
    : date: 2020-11-14;
    let i=0;
    for a in ${@:2};
    do
        let i=$i+1;
        [[ $a == $1 ]] && { 
            echo $i;
            return
        };
    done;
    echo 0
}
args_uniq () 
{ 
    : date: 2017-03-26;
    : date: 2018-10-29;
    : app_trace $*;
    : date: 2019-08-29;
    awk '
    BEGIN {
	    for (i=1; i < ARGC; i++) {
                 j = ARGV[i];
                 if (!printed[j]++) {
                     printf "%s ", j;
		 }
	     }
	     printf "\n"
	  }
    ' $*
}
awk_file () 
{ 
    : returns file name of awk script;
    : ~ [name {defaulting to calling function, i.e MYNAME 2}];
    : date: 2018-07-30;
    : date: 2018-10-05;
    : date: 2019-09-07 No Relative paths;
    awk_files | grep -v '^\.' | grep /${1:-$(myname 2)}.awk
}
awk_files () 
{ 
    : lists the awk scripts found in a lib,;
    : where "lib" is a sibling directory to a "bin";
    : on the users PATH. see BITMELD;
    : date: 2018-07-30;
    : date: 2018-10-05;
    for lib in $(paths | sed 's/bin$/lib/');
    do
        ls -1 $lib/*.awk;
    done 2> /dev/null
}
cdx () 
{ 
    : removes duplicates from directory stack list;
    : date: 2017-07-10;
    : date: 2018-05-17;
    : date: 2020-03-20 major reorganization;
    :;
    function _cds () 
    { 
        : collect unique directory stack;
        awk '
    	 !p[$0]++ {
            gsub(/\\*  */,"\\ ")
	    line[nr++] = $0
	    }
        END {
	      # pre-decrement since post increment
	      # GT 0 since dirs -c leaves the 0th directory
	      while(--nr > 0) print line[nr]
	    }
    '
    };
    function _esc () 
    { 
        : writes command to quiety tuck each directory down the stack;
        : exposing the stack on completion;
        awk '
        { printf "pushd %s > /dev/null; pushd >/dev/null\n", $0 }
    END { printf "dirs\n" }	
    '
    };
    set -- $(needir ~/tmp)/.{dirs,source};
    dirs -p -l | _cds | tee $1 | _esc > $2;
    dirs -c > /dev/null;
    : clear all but the top of the stack;
    source $2;
    unset _{cds,esc};
    rm -f $1 $2
}
clean () 
{ 
    : lists files to CLEAN up, i.e. to RM -fr;
    : optional args are the command -- $ clean rm -fr;
    : optional '.toclean' file lists directory-specific files to clean;
    : optional '.tokeep' file lists directory-specific files to Keep;
    : date: 2016-12-27 -- add TOKEEP;
    : date: 2017-07-10 -- added .tmp;
    : date: 2019-03-12 -- added .acct.*;
    ${*:-args_uniq} $(
           : name existing files matching expressions,
           ls -d *foo .[a-z] .*~ *~ .*lib {,.}*{,.}{err,out,swp,tmp}* .acct.* \#*# $(
               [[ -f .toclean ]] && cat .toclean
	   ) 2> /dev/null |  { [[ -f .tokeep ]] && grep -v -f .tokeep || cat; }
     )
}
email_comment () 
{ 
    : date: 2019-04-22;
    comment "mailto:edu <dot> MIT {dot} alum {aT} martymcgowan"
}
epoch () 
{ 
    : date: 2017-07-10;
    : date: 2017-07-18;
    : app_trace $*;
    [[ -f $1 ]] || return;
    set $(stat -r $1);
    echo ${10}
}
f2file () 
{ 
    : copy library Functions inTO separate FILEs,;
    : in directory named for the library;
    : date: 2017-07-10;
    : date: 2020-02-04 save DIRECTORY in home/lib;
    report_notfile ${1:-MissingFirstArgument} && return 1;
    set -- $1 $(home)/lib/dir/$(lib_name $1) $(awk_file);
    read_devtty set: $*;
    [[ -d $2 ]] && { 
        rm -fr $2/*
    };
    mkdir -p $2;
    cat $1 | awk -v dir=$2 -v quote="'" -f $3 2> .f2file_$$.err;
    echo $2
}
field () 
{ 
    : date: 2017-05-11;
    : date: 2017-07-18;
    awk "{ print \$$1 }"
}
fields () 
{ 
    : -- the first two lines of the table;
    : TAB separated;
    : field1 another more ...;
    : ------ ------- ---- ---;
    : app_trace $*;
    : date: 2020-11-14;
    ( echo $*;
    echo $* | sed 's/[^ ]/-/g' ) | sed 's/  */	/g'
}
file_mode () 
{ 
    : return FILEs octal permission;
    : date: 2020-03-22;
    report_notfile ${1:-/dev/null} && return 1;
    set -- $(stat -r $1);
    echo $3
}
for_nomar () 
{ 
    : continue executing first arg as command,;
    : until number of returned arguments is unchanged.;
    : date: 2016-11-10;
    : date: 2019-03-10 isolating the command saves ignoring it in the loop;
    : app_trace $*;
    : date: 2019-08-29;
    local cmmd=$1;
    shift;
    : app_trace CMMD: $cmmd, ARGS: $*;
    while true; do
        local num=$#;
        set $(args_uniq $* $($cmmd $*));
        app_trace AFTER $CMMD "num: $num, $#";
        [[ $num -eq $# ]] && break;
    done;
    : app_trace RETURN $*;
    echo $*
}
foreach () 
{ 
    : ~ command arg ...;
    : executes COMMAND foreach arg ...;
    : date: 2017-05-12;
    : date: 2017-07-16;
    : date: 2019-10-28 QUOTE the ARG;
    report_notargcount 1 $# command ... && return 1;
    for arg in "${@:2}";
    do
        $1 "$arg";
    done
}
fun_alltype () 
{ 
    : returns TAB-separated TYPE of exection object NAME;
    : e.g. function, file, builtin, keyword;
    : date: 2019-08-29;
    printf "%s\t%s\n" $(type -t $1) $1
}
fun_callgraf () 
{ 
    : writes callgraph of function arguments;
    : date: 2018-11-05;
    function app_funcall () 
    { 
        : e.g. foreach app_funcall $* PIPE callgraph;
        : produces pair, calling function called function, from caller.;
        : consolidate function around FUN_USES.;
        : date: 2017-08-16;
        : comment $(myname 3) $(myname 2) "$(myname)( $* )";
        app_funuses $1 | awk "
            \$1 ~ /^$1$/ { next }; 
	    	         { print \"$1\", \$1 }
        "
    };
    report_notargcount 1 $# && return 1;
    rm -f .funuses.out;
    : app_trace foreach app_funcall $*;
    foreach app_funcall $* | tee $(home)/lib/$1.gin | callgraph
}
fun_deparenify () 
{ 
    : separate all "( ... )" sub-expressions;
    : compare and contrast with _subexpr;
    : date 2019-10-10;
    sed 's/[(]/& /g; s/[)]/ &/g' $*;
    unset fun_olddeparenify
}
fun_libxfer () 
{ 
    : move functions from lib to lib;
    : transfer takes place in f2file copy of fun, to directories;
    report_notargcount 3 $# From To Function ... && return 2;
    local from=$1;
    shift;
    local to=$1;
    shift;
    read_devtty from: $from;
    read_devtty to: $to;
    report_notargcount 1 $# From To Function ... && return 1;
    : ---------------------------- in lieu of declare -f copies --;
    local from_dir=$(f2file $(which $from));
    : -------------------------------- verify functions in FROM --;
    set -- $(indir $from_dir ls $*);
    report_notargcount 1 $# no more functions to move && return 3;
    : ------------------------------- move functions FROM - -- > TO;
    local to_dir=$(f2file $(which $to));
    read_devtty indir $from_dir mv $* $to_dir;
    indir $from_dir mv $* $to_dir;
    : -------------------- restore updated function collections --;
    _collect_library $from_dir;
    _collect_library $to_dir
}
fun_olddeparenify () 
{ 
    : compare and contrast with _subexpr;
    : date: 2019-09-20;
    sed 's/[(]\([^)]*\)[)]/( \1 )/g' $*
}
fun_starter () 
{ 
    : generate STDERR-directed function calls to any_INIT functions;
    : date: 2018-02-16;
    : date: 2020-03-21 ONLY echo the INIT functions on ALL;
    report_notfile $1 && return 1;
    local cmmd="echo";
    for fun in $(functions $1 | grep _init$ | sort);
    do
        printf "%s %s 1>&2\n" $cmmd $fun;
    done
}
fun_words () 
{ 
    : date: 2019-09-04;
    : date: 2019-09-20;
    declare -f $* | grep -v '^ *: ' | fun_deparenify | tr -s ' \t' '\n' | grep '^[a-zA-Z0-9_]' | sed 's/;$//' | sort -u
}
home () 
{ 
    : ~ set or fetch the name of the portable File System;
    : intended for DROPBOX, but lets use a portable idea.;
    case $# in 
        0)
            : ${ALT_HOME:-$HOME}
        ;;
        *)
            [[ -d $1 ]] && ALT_HOME=$1
        ;;
    esac;
    export ALT_HOME;
    echo ${ALT_HOME:-$HOME}
}
indir () 
{ 
    : date: 2017-05-29;
    : date: 2018-10-09;
    : app_trace $*;
    report_notdirectory $1 && return 1;
    : app_trace $*;
    pushd $1 > /dev/null;
    : app_trace $*;
    eval ${@:2};
    : app_trace $*;
    popd 1>&2 > /dev/null
}
isint () 
{ 
    : TRUE if first arg IS an INTEGER;
    : ref: https://stackoverflow.com/questions/24412721/...;
    : ... elegant-solution-to-implement-timeout-for-bash-commands-and-functions/24413646;
    : date: 2020-05-17;
    : date: 2020-11-14;
    [ "$1" != "" -a "${1//[0-9-]}" = "" ]
}
l2t () 
{ 
    : copy a LST into a companion RDB;
    : date: 2020-10-20;
    : date: 2020-11-14;
    set -- ${1%.*};
    set $1.lst $1.rdb;
    report_notfile $1 && return 1;
    listtotable < $1 > $2
}
lib () 
{ 
    : a big fuss over ALT_HOME not in the ENVIRONMENT;
    : todo: see if we can eliminate its use in sh-bang;
    : app_trace home: $(home);
    : app_trace ALT_HOME: ${ALT_HOME};
    ${*:-echo} $(home)/lib
}
lib_name () 
{ 
    : for bin/*lib the basename, for locallib, the dirname;
    : date: 2020-10-01;
    report_notfile ${1:-"No File argument"} && return 1;
    runfrom $(dirname $1) $(basename $1) || return;
    case $1 in 
        locallib)
            echo $(basename $PWD)
        ;;
        *)
            echo $(basename $1)
        ;;
    esac
}
llrt () 
{ 
    : list Long, Reverse Time order;
    : date: 2019-04-21 default current directory;
    ls -lrt ${*:-.}
}
max_depth () 
{ 
    : date: 2017-03-05;
    awk -F/ '{ if( NF>max_depth) max_depth=NF } END { print max_depth-1 }'
}
mkdir () 
{ 
    : implements the -p flag by default;
    : date: 2020-03-04;
    function _mkdir () 
    { 
        for f in $*;
        do
            mkdir $f;
        done
    };
    case $1 in 
        -p)
            _mkdir ${*:2};
            return
        ;;
        -v)
            _mkdir ${*:2};
            echo ${*:2};
            return
        ;;
        -m)
            mkdir $3;
            chmod $2 $3;
            return
        ;;
    esac;
    [[ -d $1 ]] && return;
    : app_trace $*;
    mkdir $(dirname $1);
    command mkdir $1;
    unset _mkdir
}
modified_today () 
{ 
    : was the FILE argument MODIFIED TODAY?;
    : date: 2020-01-05;
    : date: 2020-02-08;
    function _modified_day () 
    { 
        set -- $(stat -t %d $1);
        : app_trace mtime: ${10};
        echo ${10:1:2};
        unset $(myname)
    };
    report_notfile ${1:-/dev/null} && return 1;
    set -- $(_modified_day $1) $(date +%d);
    : app_trace $*;
    [[ $1 == $2 ]]
}
myname () 
{ 
    : ~ [n];
    : returns name of caller OR callers caller ...;
    : date: 2018-02-16;
    echo ${FUNCNAME[${1:-1}]}
}
needir () 
{ 
    : date: 2017-05-29;
    : makes non-existent directory argument and returns name;
    : date: 2018-02-16;
    : date: 2020-03-04;
    report_notargcount 1 $# needed_directory && return 1;
    [[ -d "$1" ]] || mkdir "$1";
    echo "$1"
}
newest () 
{ 
    : returns TRUE for first - TARGET;
    : .. newest of remainder - DEPENDENT;
    : date: 2017-04-16;
    : date: 2017-07-16;
    : date: 2020-11-14;
    local caller=$(myname 2);
    : app_trace trace $*;
    [[ -f "$1" ]] || { 
        comment $caller NO TARGET $1;
        return 1
    };
    local target=$1;
    shift;
    while [[ -n "$1" ]]; do
        [[ "$target" -ot "$1" ]] && { 
            comment $caller NEWER DEPENDENT $1 than $target;
            return 1
        };
        shift;
    done;
    comment $caller NEWEST TARGET $target;
    return 0
}
nf () 
{ 
    : date: 2017-05-11;
    : date: 2017-07-18;
    case $1 in 
        *awk)
            AWK=$1;
            shift
        ;;
        *)
            AWK=$( which gawk || which nawk || which awk )
        ;;
    esac;
    case $1 in 
        lt)
            $AWK "NF < ${2:-5}"
        ;;
        gt)
            $AWK "NF > ${2:-1}"
        ;;
        eq)
            $AWK "NF == ${2:-5}"
        ;;
        ne)
            $AWK "NF != ${2:-5}"
        ;;
        help)
            comment $0 "[lt|gt|eq|ne||* [NN]]"
        ;;
        "")
            $AWK NF
        ;;
        *)
            $AWK '{ print NF, $0}'
        ;;
    esac
}
onlyfiles () 
{ 
    : date: 2018-10-09;
    : date: 2019-11-28;
    : date: 2019-11-29;
    for a in $(stdin_orargs ${*:-* .*});
    do
        [[ -f $a ]] && echo $a;
    done
}
paths () 
{ 
    : ~ returns PATH components, a line at a time;
    : date: 2017-05-29;
    : date: 2017-07-16;
    eval echo \$${1:-PATH} | sed 's/::/:.:/' | tr : '\012'
}
pick () 
{ 
    : ~ arg ...;
    : add positive replies to STDOUT;
    : y -- add to output;
    : Y -- add to output and Quit;
    : q -- Quit;
    : * -- ignore;
    : fm Kernighan and Pike, Unix Programming Enviroment, 1984;
    : date: 2018-06-22;
    :;
    for a in $*;
    do
        printf "%s\t?: " "$a" > /dev/tty;
        read response < /dev/tty;
        case $response in 
            y*)
                echo "$a" | field 1
            ;;
            Y*)
                echo "$a" | field 1;
                break
            ;;
            q*)
                break
            ;;
            *)

            ;;
        esac;
    done
}
proc_parent () 
{ 
    : which are we running, a terminal shell or a SCRIPT?;
    : date: 2020-02-03;
    case $0 in 
        -bash)
            echo ${1:-$(myname 2)}
        ;;
        *)
            basename $0
        ;;
    esac
}
proc_parent_test () 
{ 
    : test both facets of proc_parent: terminal shell or SCRIPT?;
    : date: 2020-02-03;
    set -- ./proc_bash proc_parent;
    echo FUNCTION $($2);
    echo =====;
    printf "#! /usr/bin/env bash\n%s\n%s\n" "$(qf $2)" $2 > $1;
    chmod +x $1;
    echo SCRIPT $($1);
    echo =====;
    echo the function;
    qf $(myname) | sed 's/^/    /';
    echo ----;
    echo the script:;
    sed 's/^/    /' $1
}
rcat () 
{ 
    : in place of cat command where we can afford to wait,;
    : rather than in RDB infinite recursion thru testing;
    : for table or list format file;
    : date: 2020-05-17 users now HANG waiting for input, preferred over run-away;
    : date: 2020-05-17;
    : date: 2020-05-18;
    : date: 2020-11-14;
    :;
    [[ -p /dev/stdin ]] && { 
        cat -;
        return
    };
    read line;
    [[ -n "$line" ]] && { 
        echo "$line";
        cat -;
        return
    };
    : never get here, the above READ hangs;
    run_with_timeout 5 cat
}
rdb_lines () 
{ 
    : date: 2019-10-24;
    : date: 2019-10-25;
    : date: 2020-11-14;
    awk -F'\t' '
    BEGIN { lmax = 64 }
          {
            # add a blank at line end, defend against late trim
            line = $2 " "
            while (length(line) > lmax) {
                this = substr(line,1,lmax)
		line = substr(line,lmax+1)
		pfrg = index(line," ")
		if (pfrg) {
		    # undefended line
		    this = this substr(line,1,pfrg)
		    line = substr(line,pfrg+1)
		}
                printf "%s\t%s\n", $1, this		
            }
	    if (length(line) ) {
                printf "%s\t%s\n", $1, line
	    }
          }
      '
}
report_exceedargcount () 
{ 
    : date: 2018-02-16;
    : date: 2020-03-04;
    : app_trace $*;
    : date: 2020-11-14;
    [[ $1 -gt $2 ]] && { 
        report_usage need no more than $1 arg/s: ${*:3};
        return 1
    }
}
run_with_timeout () 
{ 
    : supplies FUNCTION timeout with CMD args...;
    : usage: "run_with_timeout [N {10}] cmd args ...";
    : ref: https://stackoverflow.com/questions/24412721/elegant-solution-to-implement-timeout-for-bash-commands-and-functions/24413646;
    : date: 2020-05-17;
    : date: 2020-11-14;
    report_notargcount 1 $#;
    local time=10;
    isint $1 && { 
        time=$1;
        shift
    };
    : Run in a subshell to avoid job control messages;
    ( "$@" & child=$!;
    : Avoid default notification in non-interactive shell for SIGTERM;
    trap -- "" SIGTERM;
    ( sleep $time;
    kill $child 2> /dev/null ) & wait $child )
}
runfrom () 
{ 
    : usage: ~ DIRECTORY function args OR return;
    : date: 2019-09-10;
    : date: 2020-02-04 simplify, test using indir;
    : read_devtty ENTERING: $PWD, $*;
    : date: 2020-09-21;
    [[ $PWD = $(indir $1 pwd) ]] && return;
    : read_devtty HUNTING: $PWD, DIR: $1.;
    ignore pushd $1;
    shift;
    local cmd=$(myname 2);
    read_devtty RUNNING: $PWD, cmd: $cmd, $#: $@;
    $cmd $@;
    : read_devtty HAVE RUN: $PWD, $#: $@;
    ignore popd;
    : read_devtty POPPED: $PWD, $#: $@;
    cdx 1>&2;
    read_devtty CLEARED: $PWD, $#: $@;
    return 1
}
select_first () 
{ 
    : select the first occurrence of a fields value;
    : since "$1" in this context is the argument to this function,;
    : a column name, and NOT a awk positional paramter. this function;
    : started life with a "gem" tag, but thought better to call a "lesson"!;
    : this is the GEM of the DAY;
    : ref: needs a URL on th shelf w.r.t why such a gem;
    : date: 2020-05-08;
    : date: 2020-11-14;
    report_notpipe && { 
        cat -;
        return 1
    };
    report_notargcount 1 $# && { 
        cat -;
        return 2
    };
    row "!selected[$1]++"
}
setenv () 
{ 
    : ~ NAME value ...;
    : exports NAME to the environment,;
    : set to value ...;
    : date: 2017-08-23;
    : date: 2018-02-16;
    [[ $# -lt 1 ]] && return;
    local na=$1;
    shift;
    eval $na=\"$*\";
    export $na
}
sfg () 
{ 
    : date: 2019-12-21 back to our roots, Set Functions Grep;
    set | functions | grep "${@:-.}"
}
stdin_orargs () 
{ 
    : treat STDIN as args, OR echo any args, default to CALLER;
    : date: 2019-03-24;
    : date: 2019-11-29;
    [[ -p /dev/stdin ]] && cat || echo ${*:-$(myname 2)}
}
swhich () 
{ 
    : find a function lib, first by WHICH, and not found in NAME_LIBRAY;
    : an example of recursive decision;
    : by arg count;
    : 0 -- report;
    : 1 -- try WHICH;
    : 2 -- 2nd = swhich, an empty result from last call;
    : 2 -- 2nd = /dev/null, an empty result from WHICH, try NAME_LIBRARY;
    : 2 or 3 -- 2nd = file, its the function lib;
    : date: 2020-10-01;
    : date: 2020-10-02;
    :;
    read_devtty IN: $#, $*;
    case $#.$2.$3 in 
        0.*.*)
            report_notargcount 1 $#;
            return 1
        ;;
        1.*.*)
            swhich $1 $(which $1) /dev/null;
            return
        ;;
        2.swhich.*)
            comment NO which or entry in NAME_LIBRARY;
            return 1
        ;;
        2./dev/null.*)
            swhich $1 $(rowhas name $1 < $(home)/lib/name_library.rdb | column library | headoff) swhich;
            return
        ;;
        2.*.* | 3.*./dev/null | 3.*.swhich)
            [[ -f $2 ]] && { 
                echo $2;
                return
            }
        ;;
        *.*)
            comment too many swhichs for $1: ${*:2};
            return 1
        ;;
    esac;
    comment NO which or entry in NAME_LIBRARY;
    return 1
}
swhich_run () 
{ 
    : date: 2020-09-30;
    printf "\n\n%s\t%s\n" swhich "<$1>";
    swhich $1 | fourspaces
}
swhich_test () 
{ 
    : run which, name library, Ambiguous name, non-existant, and EMPTY;
    : date: 2020-09-30;
    foreach swhich_run functionlib chap04 chap foo ""
}
table_list () 
{ 
    : list and ADD Tables;
    : date: 2020-04-12;
    : date: 2020-11-14;
    tableorlist *.{rdb,nxt,lst} | tee $(myname).rdb | rowhas Type table | column File | headoff
}
table_me () 
{ 
    : the first argument writes its named table sorted;
    : date: 2020-10-02;
    report_notfunction $1 && return 1;
    $1 | sorttable > $1.rdb;
    echo $1.rdb
}
table_report () 
{ 
    : local tables;
    : usage: ~ OR, e.g. ~ cat, overrides default JUSTIFY;
    : RDB_LINES folds Long field lists;
    : date: 2020-09-30;
    : date: 2020-11-14;
    set -- "${@:-justify}" .tmp.{a,b,c}.report;
    newest tables.rdb *.rdb || { 
        tables | tee $2 | ncolumn fields > $3;
        column table fields < $2 | rdb_lines > $4;
        read_devtty $( wc -l  $3 $2 $4);
        jointable $3 $4 | sorttable -r modate | select_first table | sorttable > tables.rdb
    };
    $1 < tables.rdb;
    rm -f .tmp.{a,b,c}.report
}
tables () 
{ 
    : collect args or local tables on STDOUT;
    : date: 2020-11-14;
    set -- tables.rdb $(table_list);
    newest $* || ( tables_columns rdb_hdr;
    foreach tables_record $* ) > $1;
    cat $1
}
tables_columns () 
{ 
    : date: 2020-11-14;
    ${*:-echo} table nrecrds modate fields
}
tables_record () 
{ 
    : heavily dependent on STAT -t and format;
    : date: 2020-11-14;
    report_notfile $1 && return 1;
    local records=$(expr $(cat $1 | wc -l) - 2);
    local fields=$(echo $(sed 1q $1));
    local modate=$(stat -t %Y-%m-%d $1|field 10);
    printf "%s\t" $1;
    printf "%7d\t" $records;
    printf "%s\t" "${modate//\"/}";
    printf "%s\n" "$fields"
}
tag_count () 
{ 
    : date: 2020-10-02;
    rdb_hdr tag count;
    field 1 < shd_alldata.txt | sort | uniq -c | awk 'NF > 1 { printf "%s\t%6d\n", $2, $1 }'
}
timestamp () 
{ 
    : ~ fileA fileB;
    : stamp B with TIME of A;
    : date: 2016-10-02;
    : test for file A existing;
    : date: 2018-10-09;
    report_notfile $1 && return 1;
    : app_trace $*;
    touch -t $(date -r $(epoch $1)  +%Y%m%d%H%M.%S) $2
}
tpl () 
{ 
    : returns STDIN or NAMEd files as a Token Per Line;
    : date: 2020-11-14;
    cat ${*:--} | tr -s ' \t' '\n'
}
trace_app () 
{ 
    : tracing, debugging to make an APP;
    : multi-arg eg -- trace_app foreach do_whf;
    : OR trace_app declare -f;
    : date: 2020-04-25;
    ${*:-echo} trace_{call,stderr,sub,app} app_{trace,pause} pause_{on,off}
}
trace_call () 
{ 
    : obsolescent, retiring in behalf of app_trace;
    : date: 2017-07-18;
    : date: 2018-02-16;
    : date: 2020-04-23;
    trace_stderr "$@"
}
trace_help () 
{ 
    : date: 2020-09-24;
    echo trace functions:;
    sfg trace_ | sed 's/^/  /'
}
trace_init () 
{ 
    : default is trace_off, alternative trace_on;
    : date: 2020-09-24;
    trace_off
}
trace_off () 
{ 
    : date: 2019-09-15;
    : date: 2020-06-20;
    : date: 2020-09-24;
    eval "read_devtty () { return; }";
    eval "app_trace  () { return; }";
    eval "trace_toggle () { trace_on; }";
    declare -f trace_toggle 1>&2
}
trace_on () 
{ 
    : the READ syntax, for the moment, limits to ONE arg.;
    : date: 2019-09-15;
    : date: 2020-06-20;
    : date: 2020-09-24 added APP_TRACE,;
    : todo: collapse calls to app_trace, read_devtty. one to the other;
    : date: 2020-09-24;
    eval "read_devtty () { read -p \"\$(myname 2): ( \$* ) RETURN? \" < /dev/tty; }";
    eval "app_trace ()   { read -p \"\$(myname 2): ( \$* ) RETURN? \" < /dev/tty; }";
    eval "trace_toggle () { trace_off; }";
    declare -f trace_toggle 1>&2
}
trace_simple () 
{ 
    : ~ arg ...;
    : prints Calling Function and passed arguments to STDERR;
    : date: 2020-09-24;
    pa=${FUNCNAME[1]:-COMMANDLINE};
    printf "TRACE %s\t%s\n" "$pa" "$*" 1>&2
}
trace_stderr () 
{ 
    : date: 2018-02-16;
    : date: 2020-04-23;
    pa=${FUNCNAME[2]:-COMMANDLINE};
    gr=${FUNCNAME[3]:-COMMANDLINE};
    printf "TRACE %s\t@ %s\t%d  ( %s )\n" "$gr" "$pa" $# "$*" 1>&2
}
trace_sub () 
{ 
    : cloned from TRACE_STDERR, to accomodate pause_on, off;
    : also note, stack is one deeper than _STDERR;
    : todo: finds a way to unite these two off-by-one instances.;
    : date: 2018-02-16;
    : date: 2020-04-23;
    pa=${FUNCNAME[3]:-COMMANDLINE};
    gr=${FUNCNAME[4]:-COMMANDLINE};
    printf "%s\n" "$*" 1>&2
}
trace_test () 
{ 
    : date: 2020-09-24;
    trace_toggle;
    declare -f read_devtty;
    trace_toggle;
    declare -f read_devtty
}
type_word () 
{ 
    : date: 2019-11-16;
    report_notfunction ${1:-/dev/null} && return 1;
    foreach fun_alltype $(fun_words $*) | nf gt 1
}
ver_time () 
{ 
    : date: 2017-12-23;
    set -- $(date +%Y%m_%b/%d_%a/%H%M%S);
    : app_trace pwd: $PWD, return: $1;
    echo $1
}
wpl () 
{ 
    report_notpipe && return 1;
    tr -cs 'A-Za-z0-9_' '\n'
}
echo trace_init 1>&2
