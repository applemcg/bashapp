proc_parent_test () 
{ 
    : test both facets of proc_parent: terminal shell or SCRIPT?;
    : date: 2020-02-03;
    set -- ./proc_bash proc_parent;
    echo FUNCTION $($2);
    echo =====;
    printf "#! /usr/bin/env bash\n%s\n%s\n" "$(qf $2)" $2 > $1;
    chmod +x $1;
    echo SCRIPT $($1);
    echo =====;
    echo the function;
    qf $(myname) | sed 's/^/    /';
    echo ----;
    echo the script:;
    sed 's/^/    /' $1
}
app_isa () 
{ 
    : encourage FUNCTIONS to Become an APP;
    : usage: "app_isaa arg ... || return";
    : caller may have an _INIT function, if so, call it;
    : also, if CALLER_$1 is a function, call it with args, and return;
    : and, if the first argument is NOT a function and;
    : if there is a MAIN function, call it;
    : internal -- parent_subfunction, FUNC return failure = 1.;
    : to allow parent a default behavior of its own.;
    : date: 2020-01-27;
    : date: 2020-02-02 add default _MAIN function;
    local parent=$(proc_parent $(myname 2));
    local init=${parent}_init;
    local func=${parent}_$1;
    local main=${parent}_main;
    : -- any initialization;
    isfunction $init && $init 2> /dev/null;
    : app_trace parent: $parent, init: $init, func: $func, main: $main;
    : -- a PARENT_function;
    isfunction $func && { 
        shift;
        : app_trace IS FUNCTION: $func, $*;
        $func $*;
        return 1
    };
    : implicit functions;
    : app_trace $#, $*;
    case $1 in 
        help)
            : this is the default help function.;
            : a user-defined parent_help overrides by calling "parent help";
            sfg ${parent}_ | pr -t4 1>&2;
            return 1
        ;;
        *)
            isfunction $main && { 
                : app_trace IS FUNCTION: $main, $*;
                $main "$@";
                return 1
            };
            app_trace NOT Help, PARENT: $parent, args: $*;
            ( printf "$parent %s\n" "[ help |";
            printf "$(app_kids ${parent}_ | pr -t4 | sed 's/^/        /') \n]\n" ) 1>&2
        ;;
    esac
}
f2file () 
{ 
    : copy librarys Functions inTO separate FILEs;
    : need NOT be run from librarys home.;
    : enables spilling older definitions without;
    : overwriting current function definitions.;
    : date: 2017-07-10;
    : date: 2017-10-26;
    : date: 2019-10-02;
    report_notfile ${1:-MissingFirstArgument} && return 1;
    set -- $1 $(basename $1).d $(awk_file);
    : app_trace $*;
    if [ -d $2 ]; then
        rm -f $2/*;
    else
        mkdir $2;
    fi;
    : app_trace $*;
    grep -v '_init 1>&2$' $1 | awk -v dir=$2 -f $3 2> ~/tmp/f2file_$$.err
}
proc_parent () 
{ 
    : which are we running, a terminal shell or a SCRIPT?;
    : date: 2020-02-03;
    case $0 in 
        -bash)
            echo ${1:-$(myname 2)}
        ;;
        *)
            basename $0
        ;;
    esac
}
runfrom () 
{ 
    : usage: ~ DIRECTORY function args OR return;
    : date: 2019-09-10;
    : date: 2020-02-04 simplify, test using indir;
    app_trace ENTERING: $PWD, $*;
    [[ $PWD = $(indir $1 pwd) ]] && return;
    app_trace HUNTING: $PWD, DIR: $1.;
    pushd $1 1>&2;
    shift;
    local cmd=$(myname 2);
    app_trace RUNNING: $PWD, cmd: $cmd, $#: $@;
    $cmd $@;
    popd 1>&2;
    return 1
}
