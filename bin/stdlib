comment () 
{ 
    : since the DECLARE -F idiom eats;
    : date: 2018-02-16;
    echo $* 1>&2
}
file_mode () 
{ 
    : return FILEs octal permission;
    : date: 2020-03-22;
    report_notfile ${1:-/dev/null} && return 1;
    set -- $(stat -r $1);
    echo $3
}
fun_allbody () 
{ 
    : displays functions of named libraries OR function arguments;
    : date: 2017-02-19;
    : date: 2017-07-18;
    : date: 2020-03-30;
    declare -f $( fun_allnames ${*:-fun_allbody})
}
fun_allnames () 
{ 
    : returns function names of libraries or names of list, allegedgly functions;
    : date: 2018-09-28;
    : date: 2020-03-30;
    report_notargcount 1 $# library OR function ... && return 1;
    [[ -f $1 ]] && set -- $(functions $(onlyfiles $*));
    echo $* 2> /dev/null
}
ignore () 
{ 
    : ~ cmmd args ...;
    : returns STATUS, but not STDOUT;
    : trace_callstack;
    : app_trace $*;
    : date: 2019-11-23;
    $@ > /dev/null
}
isfunction () 
{ 
    : ~ function;
    : returns TRUTH of argument as FUNCTION;
    declare -f ${1:-/dev/null} > /dev/null
}
quietly () 
{ 
    : ~ cmmd args ...;
    : returns STATUS, but not STDERR;
    : date: 2018-02-16;
    : date: 2018-10-09;
    $@ 2> /dev/null
}
report_copyright () 
{ 
    : date: 2019-04-22;
    : date: 2019-03-31;
    comment "Copyright (C) 2015-2020, JYATL - Just Yet Another Testing Lab";
    email_comment
}
report_emptyfile () 
{ 
    [[ -s $1 ]] && return 1;
    report_usage File: $1 is empty
}
report_isdirectory () 
{ 
    [[ -d $1 ]] || return 1;
    report_usage $1 IS a directory and should not be ${*:2}
}
report_isfile () 
{ 
    [[ -f $1 ]] || return 1;
    report_usage $1 IS a file and should not be ${*:2}
}
report_isfunction () 
{ 
    : date: 2018-08-10;
    declare -f $1 > /dev/null || return 1;
    report_usage $1 IS a Function ${*:2}
}
report_nofilefrom () 
{ 
    : date: 2018-02-16;
    set $(eval $*) /dev/null $*;
    [[ -f $1 ]] && return 1;
    shift;
    report_usage \'$*\' did not return a file name.
}
report_notargcount () 
{ 
    : date: 2018-02-16;
    [[ $2 -ge $1 ]] && return 1;
    report_usage need at least $1 arg/s: ${*:3}
}
report_notbase () 
{ 
    : date: 2017-05-12;
    : date: 2018-02-16;
    [[ $(basename $PWD) == "$1" ]] && return 1;
    comment change to "$1" directory
}
report_notblockspecial () 
{ 
    [[ -b $1 ]] && return 1;
    report_usage $1 "ISN'T" a blockspecial file
}
report_notcalledby () 
{ 
    set ${1:-/dev/null} $(myname 3) non-Existant-function;
    [[ $2 == $1 ]] && return 1;
    report_usage "WASN'T" called by $1.
}
report_notcharacterspecial () 
{ 
    [[ -c $1 ]] && return 1;
    report_usage $1 "ISN'T" a characterspecial file
}
report_notcommand () 
{ 
    : date: 2018-02-16;
    type -a $1 > /dev/null 2> /dev/null && return 1;
    report_usage $1 "ISN'T" a command
}
report_notcurrentdirectory () 
{ 
    : date: 2018-02-16;
    : date: 2018-10-09;
    : date: 2019-11-23;
    [[ "$PWD" == "$1" ]] && return 1;
    report_usage $1 "ISN'T" $PWD ${@:2}
}
report_notdirectory () 
{ 
    : date: 2018-02-16;
    : date: 2018-10-09;
    [[ -d $1 ]] && return 1;
    report_usage $1 "ISN'T" a Directory ${@:2}
}
report_notexactcount () 
{ 
    [[ $2 -eq $1 ]] && return 1;
    report_usage need exactly $1 arg/s: ${*:3}
}
report_notexecutable () 
{ 
    [[ -x $1 ]] && return 1;
    report_usage $1 "ISN'T" an executable file
}
report_notexisting () 
{ 
    [[ -e $1 ]] && return 1;
    report_usage $1 "ISN'T" an existing file
}
report_notfile () 
{ 
    : date: 2018-02-16;
    [[ -f $1 ]] && return 1;
    report_usage $1 "ISN'T" a file
}
report_notfile_gt_zero () 
{ 
    [[ -s $1 ]] && return 1;
    report_usage $1 "ISN'T" a filegreaterthanzero
}
report_notfilegreaterthanzero () 
{ 
    : date: 2018-02-16;
    [[ -s $1 ]] && return 1;
    report_usage $1 "ISN'T" a filegreaterthanzero
}
report_notfunction () 
{ 
    : returns: TRUE when 1st arg "ISN'T" a function,;
    : ... FALSE if it IS a function;
    : date: 2018-02-16;
    declare -f $1 > /dev/null && return 1;
    report_usage $1 "ISN'T" a function
}
report_notgroup () 
{ 
    [[ -G $1 ]] && return 1;
    report_usage $1 "ISN'T" a file with group or egid
}
report_notgroupiseuid () 
{ 
    : date: 2018-02-16;
    [[ -G $1 ]] && return 1;
    report_usage $1 "ISN'T" a file with groupiseuid
}
report_notlargeenough () 
{ 
    : date: 2018-02-16;
    [[ $2 -ge $1 ]] && return 1;
    report_usage $1 $(echo 1: $1, 2: $2 3...: ${*:3})
}
report_notlib () 
{ 
    : date: 2018-01-29;
    : date: 2018-02-13;
    : date: 2018-02-16;
    [[ $(functions ${1:-MissingFirstArgument} | grep _init$ | wc -l) -gt 0 ]] && return 1;
    report_usage $1 "ISN'T" a shell function library
}
report_notmodifiedsinceread () 
{ 
    [[ -N $1 ]] && return 1;
    report_usage $1 "ISN'T" modified since last READ
}
report_notnonzerostring () 
{ 
    [[ -n $1 ]] && return 1;
    report_usage $1 "ISN'T" a nonzerolengthstring
}
report_notowner () 
{ 
    [[ -O $1 ]] && return 1;
    report_usage $1 "ISN'T" a file with owner or euid
}
report_notowneriseuid () 
{ 
    : date: 2018-02-16;
    [[ -O $1 ]] && return 1;
    report_usage $1 "ISN'T" a file with owneriseuid
}
report_notpipe () 
{ 
    : returns: TRUE when STDIN "ISN'T" a pipe;
    : ... FALSE if stdin is a pipe;
    : date: 2018-02-16;
    [[ -p /dev/stdin ]] && return 1;
    report_usage "ISN'T" reading a pipe
}
report_notreadable () 
{ 
    [[ -r $1 ]] && return 1;
    report_usage $1 "ISN'T" a readable file
}
report_notsetgroupid () 
{ 
    [[ -g $1 ]] && return 1;
    report_usage $1 "ISN'T" a file with setgroupid
}
report_notsetuserid () 
{ 
    [[ -u $1 ]] && return 1;
    report_usage $1 "ISN'T" a file with setuserid
}
report_notsocket () 
{ 
    [[ -S $1 ]] && return 1;
    report_usage $1 "ISN'T" a socket
}
report_notstickybitset () 
{ 
    [[ -k $1 ]] && return 1;
    report_usage $1 "ISN'T" a file with its stickybitset
}
report_notsymboliclink () 
{ 
    [[ -L $1 ]] && return 1;
    report_usage $1 "ISN'T" a symboliclink
}
report_notterminal () 
{ 
    case $1 in 
        [0-9])
            [[ -t $1 ]] && return 1;
            report_usage $1 "ISN'T" a TERMINAL
        ;;
        *)
            report_usage $1 is not in range 0 - 9
        ;;
    esac
}
report_nottrue () 
{ 
    : date: 2017-07-18;
    : date: 2018-02-16;
    eval "$@" && return 1;
    report_usage $@ FAILED
}
report_notwritable () 
{ 
    [[ -w $1 ]] && return 1;
    report_usage $1 "ISN'T" a writable file
}
report_notzerolengthstring () 
{ 
    [[ -z "$1" ]] && return 1;
    report_usage $1 "ISN'T" a zerolengthstring
}
report_usage () 
{ 
    : writes: usage message of report_... caller FAILURE to STDERR;
    : date: 2018-03-30;
    echo USAGE $(myname 3): $* 1>&2
}
