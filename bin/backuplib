backup_copyright () 
{ 
    : date: 2019-04-22;
    : date: 2020-03-22;
    cat <<EOF

Copyright (c) 2005-2020 Marty McGowan, JYATL - Just Yet Another Testing Lab

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.

EOF

}
backup_allfiles () 
{ 
    : BACKUP every FILE in the directory;
    : BACKUP_NEEDED reduces the list, to only those needed;
    : used: graf_prep;
    : date: 2019-09-28;
    : done: rename backup_dir backup_allfiles, then dir_backup to backup_directory;
    : todo: rename ver_backup to backup_version, and another collisions;
    : todo: and all users of any changes;
    : date: 2019-12-28;
    function backup_needed () 
    { 
        : date: 2019-09-28;
        cmp -s $1 .bak/$1 || echo $1
    };
    backup_sync;
    local files=$(onlyfiles);
    backup_main $(foreach backup_needed $files);
    unset backup_needed
}
backup_depth () 
{ 
    : return the number of the deepest backup directory;
    : date 2017-03-05;
    : date: 2019-12-28;
    backup_directories;
    find $BACKUP_DIRECTORY -type d| max_depth
}
backup_directories () 
{ 
    : default BACKUP is .bak ... directory;
    : default VERSION is .ver directory;
    : to use NON-DOT directory names, set USER_BACKUP_AREA;
    : to place in the herarchy like "/Windows/Fileshare";
    : start by clearing any default;
    : date: 2019-11-16;
    :;
    : ${USER_BACKUP_AREA:=/dev/null};
    : ${ALTERNATE_BACKUP_DIRS:=back version};
    set .bak .ver ${ALTERNATE_BACKUP_DIRS};
    case $PWD in 
        */WantaNonDotName* | *${USER_BACKUP_AREA}*)
            : shift off the defaults;
            shift 2
        ;;
    esac;
    setenv BACKUP_DIRECTORY $1 > /dev/null;
    setenv VERSION_DIRECTORY $2 > /dev/null
}
backup_files () 
{ 
    : return the names of the local files with a backup copy;
    : date: 2019-12-18;
    : date: 2019-12-28;
    backup_directories;
    indir $BACKUP_DIRECTORY onlyfiles
}
backup_main () 
{ 
    : ~ backup file ...;
    backup_directories;
    function backup_here () 
    { 
        : recursively backup a changed file in the backup tree;
        : This is the centerpiece of BACKUP process. for changed files, descend;
        : the backup tree, moving successive copies down the tree, creating an;
        : empty slot in the top backup location making a copy of the current;
        : file in that spot.;
        : date: 2019-12-28;
        :;
        set $1 $BACKUP_DIRECTORY ${2:-$PWD};
        [[ -d $2 ]] || mkdir $2;
        [[ $3 == $PWD ]] && { 
            cmp $1 $2/$1 2> /dev/null 1>&2 && return
        };
        local mode=$(file_mode $1);
        [[ -f $2/$1 ]] && { 
            cd $2;
            backup_here $1 $3
        } || { 
            mv $1 $2/$1;
            [[ $3 == $PWD ]] && { 
                cp $2/$1 $1;
                timestamp $2/$1 $1;
                chmod $mode $1;
                return
            };
            cd ..;
            backup_here $1 $3
        }
    };
    function backup_one () 
    { 
        : allows backup from another directory.;
        : avoid temptation to include as opening steps in backup_here,;
        : date: 2019-12-20 -- notfile test;
        report_notfile ${1:-/dev/null} && return 1;
        pushd $(dirname $1) > /dev/null;
        backup_here $(basename $1);
        popd > /dev/null
    };
    foreach backup_one $*;
    : unset backup_{here,one}
}
backup_paper () 
{ 
    : the BACKUP documentation, alternate "echo";
    ${*:-open} http://mcgowans.org/pubs/marty3/commonplace/software/backupfunction.html
}
backup_sync () 
{ 
    : pushes files no-longer backed up one level down the backup tree.;
    : date: 2019-12-28;
    backup_directories;
    function backup_outdated () 
    { 
        : lists backup_files no longer in current directory;
        : date: 2019-12-28;
        comm -23 <( ignore pushd $BACKUP_DIRECTORY; onlyfiles; ignore popd) <(onlyfiles)
    };
    local bak=$BACKUP_DIRECTORY;
    [[ $(basename ${PWD%/$bak}) == $bak ]] && { 
        dirs 1>&2;
        return 1
    };
    for file in $(backup_outdated);
    do
        backup_main $bak/$file;
        rm -f $bak/$file;
    done
}
backup_outdated () 
{ 
    : lists backup_files no longer in current directory;
    : date: 2019-12-09;
    : date: 2019-12-28;
    backup_directories;
    comm -23 <( ignore pushd $BACKUP_DIRECTORY; onlyfiles; ignore popd) <(onlyfiles)
}
backup_local () 
{ 
    : apps have ENTRY functions and LOCAL functions;
    ${*:-echo} backup_{copies,local,here,one,needed,outdated}
}
backup_entry () 
{ 
    : date: 2020-01-21;
    ${*:-echo} backup_{main,help,depth,directories,{all,}files,sync,ver,copyright,paper}
}
backup_ver () 
{ 
    : creates a VERSION of the CURRENT BACKUP;
    : VER_TIME is a DATE/TIME stamped directory in the VERSION directory;
    : a LINK is sufficient if not mandatory.;
    : date: 2017-03-05;
    : date: 2019-04-28 remove opional argument name for version;
    : date: 2020-05-02 add user-definable BACKUP_VERSION_FORMAT;
    : ${BACKUP_VERSION_FORMAT:="%Y%m_%b/%d_%a/%H%M%S"};
    backup_directories;
    report_notdirectory $BACKUP_DIRECTORY && return 1;
    local vername=$(date +"${BACKUP_VERSION_FORMAT}");
    echo "$VERSION_DIRECTORY/$vername";
    set -- $(backup_files | sed "s/^/$BACKUP_DIRECTORY\//");
    set -- ${*:-/dev/null};
    ln -f $* $(needir "$VERSION_DIRECTORY/$vername")
}
backup_help () 
{ 
    : lists the backup commands;
    : date: 2020-05-10;
    functions $(which backup_app) | awk -F_ '/backup/ { print $2 }'
}
