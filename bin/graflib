graf_copy () 
{ 
    : update the library functions into their API source;
    : date: 2019-10-04;
    : date: 2020-03-22 pulled up sub-function;
    function _do_graf_copy () 
    { 
        : it was easier to make this a sub-function called by INDIR,;
        : rather than use RUNFROM;
        graf_prep $1 > ~/tmp/dir.$$ || { 
            report_usage graf_prep FAILED;
            cat ~/tmp/dir.$$ 1>&2;
            unset _do_graf_{copy,libr};
            return 2
        };
        : ------------------------------------------ are linked to the ORG-view --;
        _do_graf_libr $1 $(tail -1 ~/tmp/dir.$$)
    };
    function _do_graf_libr () 
    { 
        local libr=$2;
        local appdir=$(needir ${APP_LIB}/${1%lib}_app.d);
        report_notdirectory $libr && { 
            unset _do_graf_{copy,libr};
            return 3
        };
        _lib_ls $libr/.bak;
        chmod -w $libr/.bak/*;
        : --------------------------------------- LINK the .BAK to the API SRC --;
        ln -f $libr/.bak/* $(graf_lib)/src;
        _lib_ls $(graf_lib)/src
    };
    report_notargcount 1 $# && return 1;
    case $1 in 
        *lib)
            local libr=$( which $1 )
        ;;
        *)
            report_usage Bad LIBRARY name: $1;
            return 2
        ;;
    esac;
    indir $(dirname $libr) _do_graf_copy $(basename $libr);
    local rtn=$?;
    comment unset _do_graf_{copy,libr};
    return $rtn
}
_lib_ls () 
{ 
    ls -lisart $1 | tail -24 1>&2
}
graf_prep () 
{ 
    : update the library functions into NAME.D directory, retain modification time;
    : BACKUP facilitates mod time retention;
    : date: 2019-12-14;
    : date: 2019-12-28;
    report_notfile ${1:-/dev/null} && { 
        comment run from LIBARY: $1 DIRECTORY;
        return 1
    };
    graf_tidy $1;
    _lib_ls $1;
    : ---------------------------------------- F2FILE returns DIRectory --;
    local dir=$(f2file $1);
    _lib_ls $dir;
    report_notdirectory $dir && { 
        return 2
    };
    : ---------------------------------------- the Individual Functions --;
    pushd $dir;
    backup_allfiles;
    popd;
    _lib_ls $dir;
    echo $dir
}
graf_tidy () 
{ 
    : clean duplicated functions to use latest definitions;
    : appends any necesary initialization;
    : date: 2020-02-20;
    source $1;
    { 
        declare -f $(functions $1);
        fun_starter $1
    } > .l;
    mv .l $1;
    chmod +x $1
}
graf_tapp () 
{ 
    : write the APP from its APPlib;
    : allows STD, UTIL,and the APP lib;
    : date: 2020-01-27;
    : app_trace ENTRY $*;
    report_notargcount 1 $# APP or applib && return 1;
    : apps libraries usually come from a LIB;
    local app=${1%lib};
    local apl=${app}lib;
    local entry=${app}_entry;
    local whr=$(whf $entry);
    report_notfile ${whr:-/dev/null} && return 1;
    : the source applib is now available in this APPs shell;
    source $whr;
    local entry=${app}_entry;
    report_notfunction $entry && return 1;
    : -------------------------------------- Copy libraries to SRC tree --;
    graf_copy ${apl} || return 2;
    graf_copy stdlib || return 3;
    graf_copy utillib || return 4;
    : ---------------------------------- APP_ISA is the MAIN in any APP --;
    set -- app_isa $($entry);
    : ------------------------------------------------- create the GRAF --;
    graf_main $app.out $*;
    graf_app $app
}
graf_app () 
{ 
    : CAT the FUNCTIONS in $(graf_lib) /src/ listed in $app.fun to _APP;
    : ---------------------------------------- LINK the .BAK to the APP_DIR --;
    local app=$1;
    shift;
    set -- $(graf_lib)/src cat $(cat  $(graf_lib)/$app.fun);
    indir $* > ${APP_BIN}/${app}_app;
    printf "#! /bin/bash\nsource %s\napp_isa \"\$@\"\n" ${app}_app | tee ${APP_BIN}/$app;
    chmod +x ${APP_BIN}/${app}{,_app};
    llrt ... ${APP_BIN}/${app}{,_app} 2> /dev/null
}
graf_copy_test () 
{ 
    set -- ${1:-graflib};
    graf_copy $1
}
graf_app_test () 
{ 
    set -- ${1:-graf};
    graf_app $1
}
graf_main_test () 
{ 
    set -- ${1:-graf};
    local app=${1%lib};
    local entry=${app}_entry;
    set -- app_isa $($entry);
    graf_main $app.out $*
}
graf_entry () 
{ 
    : entry points to GRAF APP;
    : where TAPP is "The APP";
    : date: 2020-01-22;
    ${*:-echo} graf_{copy,entry,init,list,tapp,scenario,version}
}
graf_version () 
{ 
    echo graf_version 0.3.7 2020-05-02
}
graf_init () 
{ 
    : allow custom GRAF_USER, an executable, SOURCable file;
    graf_default_user;
    set -- $(which graf_user) /dev/null;
    [[ -x $1 ]] && source $1
}
graf_lib () 
{ 
    : where are the GRAFs, supporting data;
    : date: 2019-10-01;
    : ${GRAF_LIB:=$(commonplace)/lib/graf};
    ${*:-echo} ${GRAF_LIB}
}
graf_list () 
{ 
    : list the available function tree graphs;
    runfrom $(graf_lib) 2> /dev/null || return;
    ls *.org
}
graf_main () 
{ 
    : produces the call graph for a list of functions, the MAIN program;
    : an optional first argument NAME.out gives the HANDLE of the output files;
    : the list is collected by app_fun fun ... tee .fun.app;
    : FUNS lists all the FUNCTIONS, FUSE exclude any _NAME. not sure why;
    :;
    : date: 2019-09-03;
    report_notargcount 1 $# "[ handle.out ] function ..." && return 1;
    local handle=$1;
    [[ $1 = ${1%.out}.out ]] && { 
        handle=${1%.out};
        shift
    };
    report_notfunction $1 && return 1;
    local file=${GRAF_LIB}/$handle.org;
    local funs=${file%.org}.fun;
    local fuse=${file%.org}.use;
    local erro=${file%.org}.err;
    app_fun $* | tee $funs | grep -v ^_ > $fuse;
    app_fcg $funs $erro > $file;
    comment $file $funs
}
graf_mainhelp () 
{ 
    : write the SHD_TOHELP for each APPs MAIN functions,;
    : where an APP has a TABLE in the GRAF_LIB,;
    : written by GRAF_MAIN;
    : date: 2019-10-04;
    : date: 2019-11-15;
    set -- $(graf_lib)/$1.rdb;
    report_notfile $1 && return 1;
    foreach shd_tohelp $(cat $1 | column mains| headoff)
}
graf_scenario () 
{ 
    : sample usage guide for multiple LIBs producing APPx;
    : where an APP is also a function library, but entire to itself;
    : each APP should have an _INIT function, so when SOURCEd,;
    : it offers instructions on how to begin;
    cat <<'EOF'

    $ graf copy libA
    $ graf copy libB
    $ ...
    $ graf main appA.out $(sfg appA)
    $ graf main appB.out $(sfg appB)
    $ ...
    $ graf tapp APP
    $ ---
    $ open $(graf_lib)/appX.org # viewing
    $ ...
    $ APP ...                   # running
    $ ...
EOF

}
graf_table () 
{ 
    : write the TABLE of MAIN function entry points;
    : for an an APP recorded by GRAF_FUN;
    : date: 2019-09-21;
    : date: 2019-11-15;
    report_notargcount 1 $# && return 1;
    set $1 $(graf_lib)/${1}.org;
    report_notfile $2 && { 
        ls $(graf_lib)/*.org;
        return 2
    };
    ( rdb_hdr mains graf;
    grep '^.\* ' $2 | sed "

        s/.*\]\[//
	s/\]\].*/	$1/

      " | sort ) > ${2%.org}.rdb
}
graf_default_user () 
{ 
    : user-preferred GRAF_{HOME,BIN,LIB} APP_BIN;
    : the APP_app and APP go to APP_BIN;
    : the user is free to define TWO functions:;
    :;
    : + home { ... } overrides $HOME;
    : + graf_user { ... } to define the following ENVIRONMENT variables;
    :;
    : date: 2019-11-15;
    : date: 2020-02-01 allow user-defined home function;
    : date: 2020-03-04 add APP_LIB and layout picture;
    :;
    local home=$(declare -f home >/dev/null && home || echo $HOME);
    setenv APP_BIN $home/bin;
    setenv APP_LIB $home/lib;
    setenv GRAF_HOME $home/graf;
    setenv GRAF_LIB ${GRAF_HOME}/lib;
    setenv GRAF_BIN ${GRAF_HOME}/bin;
    : ------------------------------------------- The GRAF Tree --;
    mkdir -p $(home)/{{lib,bin},graf/{lib,bin/src}};
    :;
    : "         +               ";
    : "	 +------+------+        ";
    : "	 +      +      +        ";
    : " lib    bin   graf       ";
    : "                +        ";
    : "            +---+--+     ";
    : "            +      +     ";
    : "           lib    bin    ";
    : "                   +     ";
    : "                  src    "
}
graf_user () 
{ 
    : replace THIS function with user-defined GRAF_ and APP_ environment variables;
    : date: 2020-02-01 allow user-defined ENVIRONMENT;
    graf_default_user
}
app_is () 
{ 
    : encourage FUNCTIONS to Become an APP;
    : usage: "app_isa arg ... || return";
    : caller may have an _INIT function, if so, call it;
    : also, if CALLER_$1 is a function, call it with args, and return;
    : and, if the first argument is NOT a function and;
    : if there is a MAIN function, call it;
    : internal -- parent_subfunction, FUNC return failure = 1.;
    : to allow parent a default behavior of its own.;
    : date: 2020-01-27;
    : date: 2020-02-02 add default _MAIN function;
    local parent=$(basename $0);
    local init=${parent}_init;
    local func=${parent}_$1;
    local main=${parent}_main;
    : -- any initialization;
    isfunction $init && $init 2> /dev/null;
    : -- a PARENT_function;
    isfunction $func && { 
        shift;
        $func $*;
        return 1
    };
    : implicit functions;
    case $1 in 
        help)
            : this is the default help function.;
            : a user-defined parent_help overrides by calling "parent help";
            sfg ${parent}_ | pr -t4 1>&2;
            return 1
        ;;
        *)
            isfunction $main && { 
                $main "$@";
                return 1
            };
            ( printf "$parent %s\n" "[ help |";
            printf "$(app_kids ${parent}_ | pr -t4 | sed 's/^/        /') \n]\n" ) 1>&2
        ;;
    esac
}
app_kids () 
{ 
    : date: 2020-01-27;
    set | grep "^$1" | sed "s/^$1//; s/^_//; s/ [(][)]//"
}
app_orgs () 
{ 
    : list the APP standards ORG files;
    : date: 2020-01-30;
    fun_standard | sed 's/:.*//' | sort -u
}
app_starter () 
{ 
    : for an APP, generate Executable function calls to all _INIT functions;
    : similar to fun_starter for LIBs;
    : date: 2019-11-24;
    report_notfile $1 && return 1;
    for fun in $(functions $1 | grep _init$ | sort);
    do
        printf "%s 1>&2\n" $fun;
    done
}
family_members () 
{ 
    : collect function: family subfunction pairs;
    : date: 2020-01-30;
    set -- ${1:-justify} $(myname).rdb;
    row 'subfunction !~ /^$/' < $(family_sub echo) | column > $2;
    $*
}
family_sub () 
{ 
    : collect family, subfunction from environment;
    : date: 2020-01-30;
    set -- ${1:-justify} $(myname).rdb;
    ( rdb_hdr family subfunction;
    sfg | grep -v '^_' | sed 's/_/	/' ) | column > $2;
    $*
}
app_fcg () 
{ 
    : fcgOrgMode link to functions App Source;
    printf "#+OPTIONS: ^:nil\n\n";
    fun_callgraf $(< $1) 2> $2 | sed '

        s/\([a-zA-Z0-9-][a-zA-Z0-9_-]*\)/[[.\/src\/\1][\1]]/
    '
}
app_fun () 
{ 
    : recursively w/for_nomar and app_funuses, find all called functions;
    : date: 2016-11-10;
    : date: 2018-10-05 key feature set PRIOR, add NEW;
    : date: 2019-08-29;
    set $* $(for_nomar app_funuses $*);
    echo $* | wpl | sort -u
}
app_funcall () 
{ 
    : e.g. foreach app_funcall $* PIPE callgraph;
    : produces pair, calling function called function, from caller.;
    : consolidate function around FUN_USES.;
    : date: 2017-08-16;
    : comment $(myname 3) $(myname 2) "$(myname)( $* )";
    app_funuses $1 | awk "
            \$1 ~ /^$1$/ { next }; 
	    	         { print \"$1\", \$1 }
        "
}
app_funuses () 
{ 
    : names the functions the function argument uses,;
    : omitting _ underscore names -- e.g. local functions;
    : date: 2017-08-16;
    : date: 2019-08-29;
    : date: 2019-11-16 replace foreach fun_alltype RUN fun_words $* with TYPE_WORD;
    type_word $* | awk "

        \$1 !~ /^function$/ { next; }
        \$2 !~ /^$1$/       { print \$2 }
    "
}
mk_graf_version () 
{ 
    : query the available versions OR define a function returning the value;
    case $# in 
        0)
            grep '^## \[' changelog.md | sed 8q
        ;;
        *)
            eval "graf_version () { echo graf_version $1 $2; }"
        ;;
    esac;
    declare -f graf_version
}
graf_init  1>&2
