This is backup.info, produced by makeinfo version 6.6 from backup.texi.

This is the User's Manual for the Only Backup You'll Ever Need.

   Here is *Note the copyright: copyright.


File: backup.info,  Node: Top,  Next: Routine Usage,  Up: (dir)

Backup Any File
***************

This manual documents the Only Backup You'll Ever Need.

   (version 0.3.1, 2020-05-09).

   Backup saves backup copies of CHANGED files, without regard to file
type or suffix.  It saves changed files in an arbitrarily recursive
descent chain of backup directories.  The most recent backup is in the
immediate sub-directory, the prior is in the second sub-directory, and
so on ...

   Since this can easily get out of hand, two features are available:
plumb the *Note depth:: to find out the maximum number of times any of
the local files was backed up, and a simple *Note ver::sion system to
save the more relevant copies.  These may be further trimmed, but no
simple facility exists to remove multiple versions.

* Menu:

* Routine Usage::         Backup, Inspecting, Tree Trimming
* Backup Commands::       Individual functions
* Environment Variables:: Runtime Customizing
* Download Install::      How to Obtain, Install
* Modification::          Developer Customization
* Appendix::              Not so Routine, but Usefull examples
* Index::                 Complete index.


File: backup.info,  Node: Routine Usage,  Next: Backup Commands,  Prev: Top,  Up: Top

1 Routine Usage
***************

In regular use, backup is followed by a list of files to backup:

   'backup file.txt file.jpg file.dat ...'

   is the short-cut for

   'backup main file.txt file.jpg file.dat ...'

   The just-backed-up file is available from the backup directory, and
may be retrieved by:

   'cp $BACKUP_DIRECTORY/file.txt .'

   The prior version is available in the next lower level:

   'cp $BACKUP_DIRECTORY/$BACKUP_DIRECTORY/file.txt .'

   And so on.  *Note depth::


File: backup.info,  Node: Backup Commands,  Next: Environment Variables,  Prev: Routine Usage,  Up: Top

2 Backup Commands
*****************

The backup commands are all typed at the command line.  Invariably
backup is the first word entered.

   This menu shows the backup sub-functions which may be used as the
first argument to the backup command.

* Menu:


* allfiles::    when backing up everything
* copyright::   the "MIT License"
* depth::       how deep, many backup levels
* files::       the current list of backup files
* help::        lists the backup sub-functions
* main::        recursively backs up a changed file into the backup tree
* paper::       README
* sync::        are some backup files no longer needed
* ver::         and Versions too.


File: backup.info,  Node: allfiles,  Next: copyright,  Up: Backup Commands

2.1 allfiles
============

A large directory uses some shortcuts to trim the list of files to
backup.  This takes no further arguments.

   'backup allfiles'

   is equivalent to

   'backup *'

   but likely much faster


File: backup.info,  Node: copyright,  Next: depth,  Prev: allfiles,  Up: Backup Commands

2.2 copyright
=============

'backup copyright'

   prints a copyright notice: this, the "MIT License".

   Copyright (c) 2005-2020 Marty McGowan, JYATL - Just Yet Another
Testing Lab

   Permission is hereby granted, free of charge, to any person obtaining
a copy of this software and associated documentation files (the
"Software"), to deal in the Software without restriction, including
without limitation the rights to use, copy, modify, merge, publish,
distribute, sublicense, and/or sell copies of the Software, and to
permit persons to whom the Software is furnished to do so, subject to
the following conditions:

   The above copyright notice and this permission notice shall be
included in all copies or substantial portions of the Software.

   THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.


File: backup.info,  Node: depth,  Next: files,  Prev: copyright,  Up: Backup Commands

2.3 depth
=========

Backup saves changed files in an arbitrarily deep recursive descent
chain of backup directories.  The depth is determined by:

   'backup depth'

   returns the number of recursive backups for the most backed-up file
in the current directory and the backup path to the file.

   Some files may only have been backed up once, larger number isn't
unlikely.

   The latest backup is stored in

   'dir=$BACKUP_DIRECTORY'

   'find $dir/$dir/$dir/... -type f'


File: backup.info,  Node: files,  Next: help,  Prev: depth,  Up: Backup Commands

2.4 files
=========

Usage: 'backup files'

   returns the list of files in the $BACKUP_DIRECTORY, without any
backup directory path information, simply the file names.  So, for
example:

   ' backup $(backup files)'

   backs up the local copies of any changed backup files.  The list may
be used on the local files:

   ' ls -lrt $(backup files)'

   When an otherwise un-backed up file is backed up, it joins the list
of backup files.


File: backup.info,  Node: help,  Next: main,  Prev: files,  Up: Backup Commands

2.5 help
========


File: backup.info,  Node: main,  Next: paper,  Prev: help,  Up: Backup Commands

2.6 main
========


File: backup.info,  Node: paper,  Next: sync,  Prev: main,  Up: Backup Commands

2.7 paper
=========


File: backup.info,  Node: sync,  Next: ver,  Prev: paper,  Up: Backup Commands

2.8 sync
========


File: backup.info,  Node: ver,  Prev: sync,  Up: Backup Commands

2.9 ver
=======

Used: 'backup ver'

   where no arguments are required.  This creates a directory:

   ./$VERSION_DIRECTORY/$BACKUP_VERSION_FORMAT

   and links all the files in the current backup directory to that
version:

   'ln -f $BACKUP_DIRECTORY/* $VERSION_DIRECTORY/$BACKUP_VERSION_FORMAT'


File: backup.info,  Node: Environment Variables,  Next: Download Install,  Prev: Backup Commands,  Up: Top

3 Environment Variables
***********************

These environment variables allow users to customize the directory
locations for the backup files and related versions.  Two features are
available.  One offers alternate names for the backup tree and the
version tree; the other allows a different naming convention in another
file hierarchy

   These Environment Variables affect the backup and Version locations.
They all have conventient, non-empty default values:

   'setenv BACKUP_DIRECTORY .bak'

   'setenv VERSION_DIRECTORY .version'

   'setenv USER_BACKUP_AREA /dev/null'

   'setenv ALTERNATE_BACKUP_DIRS "back version"'

   'setenv BACKUP_VERSION_FORMAT %Y%m_%b/%d_%a/%H%M%S'

* Menu:


* Alternate Backup Names::  Change Back and Version directories
* Alternate Hierarchy::     In a Different File Hierarchy
* User Adjustments::        How to Make Adjustments


File: backup.info,  Node: Alternate Backup Names,  Next: Alternate Hierarchy,  Up: Environment Variables

3.1 Alternate Backup Names
==========================

The BACKUP_DIRECTORY is the name of a recursively used sub-directory
where the successive backup files are found.

   The VERSION_DIRECTORY is the root of the version history.  The
current version is stored in a subdirectory given by


File: backup.info,  Node: Alternate Hierarchy,  Next: User Adjustments,  Prev: Alternate Backup Names,  Up: Environment Variables

3.2 Alternate Hierarchy
=======================

An alternate backup/version root allows the user to emply two
conventions for the root names for backup and version trees.

   In every place in the file system, preferably, but not necessarily in
the user's account, the BACKUP_DIRECTORY and the VESION_DIRECTORY assign
the backup and version storage location.

   The user may specify a portion or portions of the file system tree by
a name in the USER_BACKUP_AREA and two names in the
ALTERNATE_BACKUP_DIRS.

   The need arises from a shared installation with Windows users.
Directory or folder names with a leading period, namely .bak and .ver
present conceptual and operational problems.

   Therefore, an alternate root is established by setting the
USER_BACKUP_AREA:

   'setenv USER_BACKUP_AREA /Dropbox/FileShare'

   'setenv ALTERNATE_BACKUP_DIRS ``back version'''


File: backup.info,  Node: User Adjustments,  Prev: Alternate Hierarchy,  Up: Environment Variables

3.3 User Adjustments
====================

The feature, using an optional sourceable backup_user gives the user to
set alternate backup, version directories for another part of the user's
file tree.

   Where the Dropbox directory may be at any point in the filesystem and
the ALTERNATE_BACKUP_DIRS sets the respective backup and version trees.
For example a file in $HOME/some/$USER_BACKUP_AREA/place will be backed
up in $HOME/some/$USER_BACKUP_AREA/place/back with successive
back/back/..  as necessary.

   A recent version of the same file will be found in
$HOME/some/$USER_BACKUP_AREA/version/...  BACKUP_VERSION_FORMAT ...

   The actual location will most likely, give a time-sensitive
BACKUP_VERSION_FORMAT with this command, excuted in
$HOME/some/$USER_BACKUP_AREA :

   'find version -type f | xargs ls -lrt'


File: backup.info,  Node: Download Install,  Next: Modification,  Prev: Environment Variables,  Up: Top

4 Download Install
******************


File: backup.info,  Node: Modification,  Next: Appendix,  Prev: Download Install,  Up: Top

5 Modification
**************


File: backup.info,  Node: Appendix,  Next: Index,  Prev: Modification,  Up: Top

Appendix A Appendix
*******************

* Menu:


* Backup in Scripts::    It's not just for the command line
* On Deep Backups::      Watching the backup tree
* When to Version::      Why, How
* Sample backup_user::   Copy the list of Enviroment Variable resets


File: backup.info,  Node: Backup in Scripts,  Next: On Deep Backups,  Up: Appendix

A.1 Backup in Scripts
=====================


File: backup.info,  Node: On Deep Backups,  Next: When to Version,  Prev: Backup in Scripts,  Up: Appendix

A.2 On Deep Backups
===================


File: backup.info,  Node: When to Version,  Next: Sample backup_user,  Prev: On Deep Backups,  Up: Appendix

A.3 When to Version
===================


File: backup.info,  Node: Sample backup_user,  Prev: When to Version,  Up: Appendix

A.4 Sample backup_user
======================

#!  /usr/bin/env bash # --------------------------------------
backup_user	- # # ------------------------ Universally True	- # export
BACKUP_VERSION_FORMAT %Y%m/%d-%H%M%s # # ---------------------------
Mostly True	- # export BACKUP_DIRECTORY .backup export VERSION_DIRECTORY
.version # # ------------------------ Exceptional Case	- # # any files
under a ./src directory # # n.b.  even reusing .version; it must be
specified # export USER_BACKUP_AREA=/src export
ALTERNATE_BACK_DIRS=".src .version"


File: backup.info,  Node: Index,  Prev: Appendix,  Up: Top

Index
*****

 [index ]
* Menu:

* backup:                                Routine Usage.         (line 6)
* backup <1>:                            ver.                   (line 6)
* backup <2>:                            Environment Variables. (line 6)
* commands, backup:                      Backup Commands.       (line 6)
* copyright:                             copyright.             (line 6)
* depth:                                 depth.                 (line 6)
* directories:                           Environment Variables. (line 6)
* directory:                             depth.                 (line 6)
* directory <1>:                         ver.                   (line 6)
* directory <2>:                         Environment Variables. (line 6)
* main:                                  Routine Usage.         (line 6)
* main <1>:                              Backup Commands.       (line 6)
* root:                                  ver.                   (line 6)
* root <1>:                              Environment Variables. (line 6)
* sub-function:                          Backup Commands.       (line 6)
* ver:                                   depth.                 (line 6)
* version:                               Routine Usage.         (line 6)
* version <1>:                           ver.                   (line 6)
* version <2>:                           Environment Variables. (line 6)
* Windows OS:                            Environment Variables. (line 6)



Tag Table:
Node: Top182
Node: Routine Usage1364
Node: Backup Commands1947
Node: allfiles2715
Node: copyright3015
Node: depth4325
Node: files4892
Node: help5415
Node: main5517
Node: paper5619
Node: sync5723
Node: ver5824
Node: Environment Variables6192
Node: Alternate Backup Names7176
Node: Alternate Hierarchy7574
Node: User Adjustments8581
Node: Download Install9504
Node: Modification9650
Node: Appendix9775
Node: Backup in Scripts10123
Node: On Deep Backups10254
Node: When to Version10405
Node: Sample backup_user10557
Node: Index11191

End Tag Table
